<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微信网页开发</title>
      <link href="/2019/09/08/%E5%BE%AE%E4%BF%A1%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91/"/>
      <url>/2019/09/08/%E5%BE%AE%E4%BF%A1%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="微信网页授权"><a href="#微信网页授权" class="headerlink" title="微信网页授权"></a>微信网页授权</h2><p>简单来说就是，如果用户在微信客户端中访问第三方网页，公众号可以通过微信网页授权机制，来获取用户基本信息，进而实现业务逻辑。</p><p><strong>具体而言，网页授权流程分为三步</strong></p><ol><li>引导用户进入授权页面同意授权，获取code</li><li>通过code换取网页授权access_token（与基础支持中的access_token不同）</li><li>通过网页授权access_token和openid获取用户基本信息（支持UnionID机制）</li></ol><h3 id="授权流程"><a href="#授权流程" class="headerlink" title="授权流程"></a>授权流程</h3><blockquote><p>测试号申请 <a href="https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index</a></p></blockquote><h4 id="第一步：用户同意授权，获取code"><a href="#第一步：用户同意授权，获取code" class="headerlink" title="第一步：用户同意授权，获取code"></a>第一步：用户同意授权，获取code</h4><p>(一) 公众平台网页授权<br>在确保微信公众账号拥有授权作用域（scope参数）的权限的前提下（服务号获得高级接口后，默认拥有scope参数中的snsapi_base和snsapi_userinfo），引导关注者打开如下页面：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> Href: https:<span class="comment">//open.weixin.qq.com/connect/oauth2/authorize</span></span><br><span class="line"> </span><br><span class="line"> parasm: &#123;</span><br><span class="line">   appid: APPID, <span class="comment">// 公众号的唯一标识</span></span><br><span class="line">   redirect_uri: REDIRECT_URI, <span class="comment">//需要公众号授权作用域相同，授权后重定向的回调链接地址， 请使用 urlEncode 对链接进行处理</span></span><br><span class="line">   response_type: <span class="string">'code'</span>, <span class="comment">//返回类型</span></span><br><span class="line">   scope: SCOPE, <span class="comment">// 应用授权作用域，snsapi_base （不弹出授权页面，直接跳转，只能获取用户openid），snsapi_userinfo （弹出授权页面，可通过openid拿到昵称、性别、所在地。并且， 即使在未关注的情况下，只要用户授权，也能获取其信息 ）</span></span><br><span class="line">   state: STATE, <span class="comment">// 重定向后会带上state参数，开发者可以填写a-zA-Z0-9的参数值，最多128字节</span></span><br><span class="line">   #wechat_redirect //无论直接打开还是做页面302重定向时候，必须带此参数</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 若提示“该链接无法访问”，请检查参数是否填写错误，是否拥有scope参数对应的授权作用域权限。</span></span><br></pre></td></tr></table></figure></p><p>尤其注意：由于授权操作安全等级较高，所以在发起授权请求时，微信会对授权链接做正则强匹配校验，如果链接的参数顺序不对，授权页面将无法正常访问</p><blockquote><p><strong>注意：</strong> </p><ol><li>由于授权操作安全等级较高，所以在发起授权请求时，微信会对授权链接做正则强匹配校验，如果链接的参数顺序不对，授权页面将无法正常访问;</li><li>对于已关注公众号的用户，如果用户从公众号的会话或者自定义菜单进入本公众号的网页授权页，即使是scope为snsapi_userinfo，也是静默授权，用户无感知。</li></ol></blockquote><p>(二) 开放平台网页扫码授权<br> （1）跳转微信授权域授权<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> Href: https:<span class="comment">//open.weixin.qq.com/connect/qrconnect</span></span><br><span class="line"> </span><br><span class="line"> parasm: &#123;</span><br><span class="line">   appid: APPID, <span class="comment">// 公众号的唯一标识</span></span><br><span class="line">   redirect_uri: REDIRECT_URI, <span class="comment">//需要公众号授权作用域相同，授权后重定向的回调链接地址， 请使用 urlEncode 对链接进行处理</span></span><br><span class="line">   response_type: <span class="string">'code'</span>, <span class="comment">//返回类型</span></span><br><span class="line">   scope: SCOPE, <span class="comment">// 应用授权作用域，拥有多个作用域用逗号（,）分隔，网页应用目前仅填写snsapi_login</span></span><br><span class="line">   state: STATE, <span class="comment">// 重定向后会带上state参数，开发者可以填写a-zA-Z0-9的参数值，最多128字节</span></span><br><span class="line">   #wechat_redirect //无论直接打开还是做页面302重定向时候，必须带此参数</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//若提示“该链接无法访问”，请检查参数是否填写错误，如redirect_uri的域名与审核时填写的授权域名不一致或scope不为snsapi_login。</span></span><br></pre></td></tr></table></figure></p><p>（2）授权码内嵌到自己页面授权<br>步骤1：在页面中先引入如下JS文件（支持https）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//res.wx.qq.com/connect/zh_CN/htmledition/js/wxLogin.js</span></span><br></pre></td></tr></table></figure></p><p>步骤2：在需要使用微信登录的地方实例以下JS对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> WxLogin(&#123;</span><br><span class="line">self_redirect: <span class="literal">false</span>, <span class="comment">// true：手机点击确认登录后可以在 iframe 内跳转到 redirect_uri，false：手机点击确认登录后可以在 top window 跳转到 redirect_uri。默认为 false。</span></span><br><span class="line">id:<span class="string">"login_container"</span>,  <span class="comment">// 第三方页面显示二维码的容器id</span></span><br><span class="line">appid: <span class="string">""</span>,  <span class="comment">// 应用唯一标识，在微信开放平台提交应用审核通过后获得</span></span><br><span class="line">scope: <span class="string">""</span>,  <span class="comment">// 应用授权作用域，拥有多个作用域用逗号（,）分隔，网页应用目前仅填写snsapi_login即可</span></span><br><span class="line">redirect_uri: <span class="string">""</span>, <span class="comment">// 重定向地址，需要进行UrlEncode</span></span><br><span class="line">state: <span class="string">""</span>, <span class="comment">// 用于保持请求和回调的状态，授权请求后原样带回给第三方。该参数可用于防止csrf攻击（跨站请求伪造攻击），建议第三方带上该参数，可设置为简单的随机数加session进行校验</span></span><br><span class="line">style: <span class="string">""</span>, <span class="comment">// 提供"black"、"white"可选，默认为黑色文字描述。</span></span><br><span class="line">href: <span class="string">""</span> <span class="comment">// 自定义样式链接，第三方可根据实际需求覆盖默认样式。</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="第二步：通过code换取网页授权access-token"><a href="#第二步：通过code换取网页授权access-token" class="headerlink" title="第二步：通过code换取网页授权access_token"></a>第二步：通过code换取网页授权access_token</h4><p>第一步用户授权后会跳转至redirect_uri/?code=CODE&amp;state=STATE</p><blockquote><p><strong>注意：</strong><br>code作为换取access_token的票据，每次用户授权带上的code将不一样，code只能使用一次，5分钟未被使用自动过期</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET: https:<span class="comment">//api.weixin.qq.com/sns/oauth2/access_token</span></span><br><span class="line"></span><br><span class="line">params: &#123;</span><br><span class="line">  appid: APPID, <span class="comment">// 公众号的唯一标识</span></span><br><span class="line">  secret: SECRET, <span class="comment">// 公众号的appsecret</span></span><br><span class="line">  code: CODE, <span class="comment">// 填写第一步获取的code参数</span></span><br><span class="line">  grant_type: <span class="string">'authorization_code'</span> <span class="comment">//填写为authorization_code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的JSON结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"access_token"</span>:<span class="string">"ACCESS_TOKEN"</span>, <span class="comment">// 网页授权接口调用凭证,注意：此access_token与基础支持的access_token不同</span></span><br><span class="line">  <span class="string">"expires_in"</span>:<span class="number">7200</span>, <span class="comment">//access_token接口调用凭证超时时间，单位（秒）</span></span><br><span class="line">  <span class="string">"refresh_token"</span>:<span class="string">"REFRESH_TOKEN"</span>, <span class="comment">//用户刷新access_token</span></span><br><span class="line">  <span class="string">"openid"</span>:<span class="string">"OPENID"</span>, <span class="comment">//用户唯一标识，请注意，在未关注公众号时，用户访问公众号的网页，也会产生一个用户和公众号唯一的OpenID</span></span><br><span class="line">  <span class="string">"scope"</span>:<span class="string">"SCOPE"</span>  <span class="comment">//用户授权的作用域，使用逗号（,）分隔</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 由于公众号的secret和获取到的access_token安全级别都非常高，必须只保存在服务器，不允许传给客户端。后续刷新access_token、通过access_token获取用户信息等步骤，也必须从服务器发起。</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong><br>由于access_token拥有较短的有效期，当access_token超时后，可以使用refresh_token进行刷新，refresh_token有效期为30天，当refresh_token失效之后，需要用户重新授权。</p></blockquote><p><strong>校验授权凭证（access_token）是否有效</strong><br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">GET:</span> https:<span class="comment">//api.weixin.qq.com/sns/auth</span></span><br><span class="line"><span class="symbol">params:</span> &#123;</span><br><span class="line"><span class="symbol">  openid:</span> OPENID, <span class="comment">// 用户的唯一标识</span></span><br><span class="line"><span class="symbol">  access_token:</span> ACCESS_TOKEN <span class="comment">// 网页授权接口调用凭证,注意：此access_token与基础支持的access_token不同</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回JOSN结果</span></span><br><span class="line">&#123; <span class="string">"errcode"</span>:<span class="number">0</span>,<span class="string">"errmsg"</span>:<span class="string">"ok"</span>&#125;</span><br></pre></td></tr></table></figure></p><p><strong>刷新授权凭证（access_token）</strong><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">GET:</span> <span class="string">https:</span><span class="comment">//api.weixin.qq.com/sns/oauth2/refresh_token</span></span><br><span class="line"><span class="string">params:</span> &#123;</span><br><span class="line"><span class="symbol">  appid:</span> APPID,</span><br><span class="line"><span class="symbol">  grant_type:</span> <span class="string">'refresh_token'</span>,</span><br><span class="line"><span class="symbol">  refresh_token:</span> REFRESH_TOKEN</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的JSON结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"access_token"</span>:<span class="string">"ACCESS_TOKEN"</span>, <span class="comment">// 网页授权接口调用凭证,注意：此access_token与基础支持的access_token不同</span></span><br><span class="line">  <span class="string">"expires_in"</span>:<span class="number">7200</span>, <span class="comment">//access_token接口调用凭证超时时间，单位（秒）</span></span><br><span class="line">  <span class="string">"refresh_token"</span>:<span class="string">"REFRESH_TOKEN"</span>, <span class="comment">//用户刷新access_token</span></span><br><span class="line">  <span class="string">"openid"</span>:<span class="string">"OPENID"</span>, <span class="comment">//用户唯一标识，请注意，在未关注公众号时，用户访问公众号的网页，也会产生一个用户和公众号唯一的OpenID</span></span><br><span class="line">  <span class="string">"scope"</span>:<span class="string">"SCOPE"</span>  <span class="comment">//用户授权的作用域，使用逗号（,）分隔</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="第三步：拉取用户信息-需scope为-snsapi-userinfo"><a href="#第三步：拉取用户信息-需scope为-snsapi-userinfo" class="headerlink" title="第三步：拉取用户信息(需scope为 snsapi_userinfo)"></a>第三步：拉取用户信息(需scope为 snsapi_userinfo)</h4><p>如果网页授权作用域为snsapi_userinfo，则此时开发者可以通过access_token和openid拉取用户信息了。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">GET:</span> <span class="string">https:</span><span class="comment">//api.weixin.qq.com/sns/userinfo</span></span><br><span class="line"><span class="string">params:</span> &#123;</span><br><span class="line"><span class="symbol">  access_token:</span> ACCESS_TOKEN,</span><br><span class="line"><span class="symbol">  openid:</span> OPENID,</span><br><span class="line"><span class="symbol">  lang:</span> <span class="string">'zh_CN'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回JSON数据包</span></span><br><span class="line">&#123;   </span><br><span class="line">  <span class="string">"openid"</span>:<span class="string">"OPENID"</span>, <span class="comment">//用户的唯一标识</span></span><br><span class="line">  <span class="string">"nickname"</span>: NICKNAME,  <span class="comment">//用户昵称</span></span><br><span class="line">  <span class="string">"sex"</span>:<span class="string">"1"</span>,  <span class="comment">//用户的性别，值为1时是男性，值为2时是女性，值为0时是未知</span></span><br><span class="line">  <span class="string">"province"</span>:<span class="string">"PROVINCE"</span> <span class="comment">//用户个人资料填写的省份</span></span><br><span class="line">  <span class="string">"city"</span>:<span class="string">"CITY"</span>, <span class="comment">//普通用户个人资料填写的城市</span></span><br><span class="line">  <span class="string">"country"</span>:<span class="string">"COUNTRY"</span>, <span class="comment">//国家，如中国为CN</span></span><br><span class="line">  <span class="string">"headimgurl"</span>: <span class="string">"HEADIMG_URL"</span>, <span class="comment">//用户头像，最后一个数值代表正方形头像大小（有0、46、64、96、132数值可选，0代表640*640正方形头像），用户没有头像时该项为空。若用户更换头像，原有头像URL将失效。</span></span><br><span class="line">  <span class="string">"privilege"</span>:[ <span class="string">"PRIVILEGE1"</span> <span class="string">"PRIVILEGE2"</span>],  <span class="comment">//用户特权信息，json 数组，如微信沃卡用户为（chinaunicom）</span></span><br><span class="line">  <span class="string">"unionid"</span>: <span class="string">"o6_bmasdasdsad6_2sgVt7hMZOPfL"</span>  <span class="comment">// 只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。(https://open.weixin.qq.com/cgi-bin/index?t=home/index&amp;lang=zh_CN)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="需要知道"><a href="#需要知道" class="headerlink" title="需要知道"></a>需要知道</h3><blockquote><p>关于网页授权access_token和普通access_token的区别</p></blockquote><p>1、微信网页授权是通过OAuth2.0机制实现的，在用户授权给公众号后，公众号可以获取到一个网页授权特有的接口调用凭证（网页授权access_token），通过网页授权access_token可以进行授权后接口调用，如获取用户基本信息；</p><p>2、其他微信接口，需要通过基础支持中的“获取access_token”接口来获取到的普通access_token调用。</p><blockquote><p>关于UnionID机制</p></blockquote><p>1、请注意，网页授权获取用户基本信息也遵循UnionID机制。即如果开发者有在多个公众号，或在公众号、移动应用之间统一用户帐号的需求，需要前往微信开放平台（open.weixin.qq.com）绑定公众号后，才可利用UnionID机制来满足上述需求。</p><p>2、UnionID机制的作用说明：如果开发者拥有多个移动应用、网站应用和公众帐号，可通过获取用户基本信息中的unionid来区分用户的唯一性，因为同一用户，对同一个微信开放平台下的不同应用（移动应用、网站应用和公众帐号），unionid是相同的。</p><blockquote><p>关于特殊场景下的静默授权</p></blockquote><p>1、上面已经提到，对于以snsapi_base为scope的网页授权，就静默授权的，用户无感知；<br>2、对于已关注公众号的用户，如果用户从公众号的会话或者自定义菜单进入本公众号的网页授权页，即使是scope为snsapi_userinfo，也是静默授权，用户无感知。</p><hr><h2 id="JSSDk功能简介"><a href="#JSSDk功能简介" class="headerlink" title="JSSDk功能简介"></a>JSSDk功能简介</h2><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#0" target="_blank" rel="noopener">jssdk微信官方文档</a></p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>微信JS-SDK是微信公众平台 面向网页开发者提供的基于微信内的网页开发工具包。</p><p>通过使用微信JS-SDK，网页开发者可借助微信高效地使用拍照、选图、语音、位置等手机系统的能力，同时可以直接使用微信分享、扫一扫、卡券、支付等微信特有的能力，为微信用户提供更优质的网页体验。</p><h3 id="JSSDK使用步骤"><a href="#JSSDK使用步骤" class="headerlink" title="JSSDK使用步骤"></a>JSSDK使用步骤</h3><h4 id="步骤一：绑定域名"><a href="#步骤一：绑定域名" class="headerlink" title="步骤一：绑定域名"></a>步骤一：绑定域名</h4><p>先登录<a href="https://mp.weixin.qq.com" target="_blank" rel="noopener">微信公众平台</a>进入”公众号设置–&gt;功能设置”里填写“JS接口安全域名”。</p><h4 id="步骤二：引入JS文件"><a href="#步骤二：引入JS文件" class="headerlink" title="步骤二：引入JS文件"></a>步骤二：引入JS文件</h4><p>在需要调用JS接口的页面引入如下JS文件，（支持https）：<code>http://res.wx.qq.com/open/js/jweixin-1.4.0.js</code></p><p>如需进一步提升服务稳定性，当上述资源不可访问时，可改访问：<code>http://res2.wx.qq.com/open/js/jweixin-1.4.0.js</code> （支持https）。</p><p>备注：支持使用 AMD/CMD 标准模块加载方法加载</p><h4 id="步骤三：通过config接口注入权限验证配置"><a href="#步骤三：通过config接口注入权限验证配置" class="headerlink" title="步骤三：通过config接口注入权限验证配置"></a>步骤三：通过config接口注入权限验证配置</h4><p>所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用（同一个url仅需调用一次，对于变化url的SPA的web app可在每次url变化时进行调用,目前Android微信客户端不支持pushState的H5新特性，所以使用pushState来实现web app的页面会导致签名失败，此问题会在Android6.2中修复）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">  debug: <span class="literal">true</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">  appId: <span class="string">''</span>, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">  timestamp: , <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">  nonceStr: <span class="string">''</span>, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">  signature: <span class="string">''</span>,<span class="comment">// 必填，签名</span></span><br><span class="line">  jsApiList: [] <span class="comment">// 必填，需要使用的JS接口列表</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="步骤四：通过ready接口处理成功验证"><a href="#步骤四：通过ready接口处理成功验证" class="headerlink" title="步骤四：通过ready接口处理成功验证"></a>步骤四：通过ready接口处理成功验证</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="步骤五：通过error接口处理失败验证"><a href="#步骤五：通过error接口处理失败验证" class="headerlink" title="步骤五：通过error接口处理失败验证"></a>步骤五：通过error接口处理失败验证</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.error(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>接口调用说明</p></blockquote><p>所有接口通过wx对象(也可使用jWeixin对象)来调用，参数是一个对象，除了每个接口本身需要传的参数之外，还有以下通用参数：</p><ol><li>success：接口调用成功时执行的回调函数。</li><li>fail：接口调用失败时执行的回调函数。</li><li>complete：接口调用完成时执行的回调函数，无论成功或失败都会执行。</li><li>cancel：用户点击取消时的回调函数，仅部分有用户取消操作的api才会用到。</li><li>trigger: 监听Menu中的按钮点击时触发的方法，该方法仅支持Menu中的相关接口。</li></ol><h3 id="常用接口举例"><a href="#常用接口举例" class="headerlink" title="常用接口举例"></a>常用接口举例</h3><h4 id="自定义“分享给朋友”及“分享到QQ”按钮的分享内容（1-4-0）"><a href="#自定义“分享给朋友”及“分享到QQ”按钮的分享内容（1-4-0）" class="headerlink" title="自定义“分享给朋友”及“分享到QQ”按钮的分享内容（1.4.0）"></a><strong>自定义“分享给朋友”及“分享到QQ”按钮的分享内容（1.4.0）</strong></h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">wx</span><span class="selector-class">.ready</span>(function () &#123;   <span class="comment">//需在用户可能点击分享按钮前就先调用</span></span><br><span class="line">  <span class="selector-tag">wx</span><span class="selector-class">.updateAppMessageShareData</span>(&#123; </span><br><span class="line">    <span class="attribute">title</span>: <span class="string">''</span>, <span class="comment">// 分享标题</span></span><br><span class="line">    <span class="attribute">desc</span>: <span class="string">''</span>, <span class="comment">// 分享描述</span></span><br><span class="line">    <span class="attribute">link</span>: <span class="string">''</span>, <span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line">    <span class="attribute">imgUrl</span>: <span class="string">''</span>, <span class="comment">// 分享图标</span></span><br><span class="line">    <span class="attribute">success</span>: function () &#123;</span><br><span class="line">      <span class="comment">// 设置成功</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="自定义“分享到朋友圈”及“分享到QQ空间”按钮的分享内容（1-4-0）"><a href="#自定义“分享到朋友圈”及“分享到QQ空间”按钮的分享内容（1-4-0）" class="headerlink" title="自定义“分享到朋友圈”及“分享到QQ空间”按钮的分享内容（1.4.0）"></a><strong>自定义“分享到朋友圈”及“分享到QQ空间”按钮的分享内容（1.4.0）</strong></h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wx.ready(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;      <span class="comment">//需在用户可能点击分享按钮前就先调用</span></span><br><span class="line">  wx.updateTimelineShareData(&#123; </span><br><span class="line">    title: <span class="string">''</span>, <span class="comment">// 分享标题</span></span><br><span class="line">    link: <span class="string">''</span>, <span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line">    imgUrl: <span class="string">''</span>, <span class="comment">// 分享图标</span></span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 设置成功</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="操作界面"><a href="#操作界面" class="headerlink" title="操作界面"></a><strong>操作界面</strong></h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">1</span>. 关闭当前网页窗口接口</span><br><span class="line"><span class="selector-tag">wx</span><span class="selector-class">.closeWindow</span>();</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">2</span>. 批量隐藏功能按钮接口</span><br><span class="line"><span class="selector-tag">wx</span><span class="selector-class">.hideMenuItems</span>(&#123;</span><br><span class="line">  <span class="attribute">menuList</span>: [] <span class="comment">// 要隐藏的菜单项，只能隐藏“传播类”和“保护类”按钮，所有menu项见附录3</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">3</span>. 批量显示功能按钮接口</span><br><span class="line"><span class="selector-tag">wx</span><span class="selector-class">.showMenuItems</span>(&#123;</span><br><span class="line">  <span class="attribute">menuList</span>: [] <span class="comment">// 要显示的菜单项，所有menu项见附录3</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">4</span>.隐藏所有非基础按钮接口</span><br><span class="line"><span class="selector-tag">wx</span><span class="selector-class">.hideAllNonBaseMenuItem</span>();</span><br><span class="line"><span class="comment">// “基本类”按钮详见附录3</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">5</span>.显示所有功能按钮接口</span><br><span class="line"><span class="selector-tag">wx</span><span class="selector-class">.showAllNonBaseMenuItem</span>();</span><br></pre></td></tr></table></figure><h2 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h2><p><a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_3" target="_blank" rel="noopener">JSAPI支付</a>：用户通过微信扫码、关注公众号等方式进入商家H5页面，并在微信内调用JSSDK完成支付</p><p><a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_4" target="_blank" rel="noopener">H5支付</a>：用户在微信以外的手机浏览器请求微信支付的场景唤起微信支付</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ol><li>基本类</li></ol><ul><li>举报: “menuItem:exposeArticle”</li><li>调整字体: “menuItem:setFont”</li><li>日间模式: “menuItem:dayMode”</li><li>夜间模式: “menuItem:nightMode”</li><li>刷新: “menuItem:refresh”</li><li>查看公众号（已添加）: “menuItem:profile”</li><li>查看公众号（未添加）: “menuItem:addContact”</li></ul><ol start="2"><li>传播类</li></ol><ul><li>发送给朋友: “menuItem:share:appMessage”</li><li>分享到朋友圈: “menuItem:share:timeline”</li><li>分享到QQ: “menuItem:share:qq”</li><li>分享到Weibo: “menuItem:share:weiboApp”</li><li>收藏: “menuItem:favorite”</li><li>分享到FB: “menuItem:share:facebook”</li><li>分享到 QQ 空间/menuItem:share:QZone</li></ul><ol start="3"><li>保护类</li></ol><ul><li>编辑标签: “menuItem:editTag”</li><li>删除: “menuItem:delete”</li><li>复制链接: “menuItem:copyUrl”</li><li>原网页: “menuItem:originPage”</li><li>阅读模式: “menuItem:readMode”</li><li>在QQ浏览器中打开: “menuItem:openWithQQBrowser”</li><li>在Safari中打开: “menuItem:openWithSafari”</li><li>邮件: “menuItem:share:email”</li><li>一些特殊公众号: “menuItem:share:brand”</li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zlib</title>
      <link href="/2019/07/10/Zlib/"/>
      <url>/2019/07/10/Zlib/</url>
      
        <content type="html"><![CDATA[<h1 id="zlib"><a href="#zlib" class="headerlink" title="zlib"></a>zlib</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>做过web性能优化的同学，对性能优化大杀器gzip应该不陌生。浏览器向服务器发起资源请求，比如下载一个js文件，服务器先对资源进行压缩，再返回给浏览器，以此节省流量，加快访问速度。</p><p>浏览器通过HTTP请求头部里加上<strong>Accept-Encoding</strong>，告诉服务器，“你可以用gzip，或者defalte算法压缩资源”。</p><blockquote><p>Accept-Encoding:gzip, deflate</p></blockquote><p>那么，在nodejs里，是如何对资源进行压缩的呢？答案就是Zlib模块。</p><h2 id="入门实例：简单的压缩-解压缩"><a href="#入门实例：简单的压缩-解压缩" class="headerlink" title="入门实例：简单的压缩/解压缩"></a>入门实例：简单的压缩/解压缩</h2><h3 id="压缩的例子"><a href="#压缩的例子" class="headerlink" title="压缩的例子"></a>压缩的例子</h3><p>非常简单的几行代码，就完成了本地文件的gzip压缩</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gzip = zlib.createGzip();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inFile = fs.createReadStream(<span class="string">'./extra/fileForCompress.txt'</span>);</span><br><span class="line"><span class="keyword">const</span> out = fs.createWriteStream(<span class="string">'./extra/fileForCompress.txt.gz'</span>);</span><br><span class="line"></span><br><span class="line">inFile.pipe(gzip).pipe(out);</span><br></pre></td></tr></table></figure><h3 id="解压的例子"><a href="#解压的例子" class="headerlink" title="解压的例子"></a>解压的例子</h3><p>同样非常简单，就是个反向操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gunzip = zlib.createGunzip();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inFile = fs.createReadStream(<span class="string">'./extra/fileForCompress.txt.gz'</span>);</span><br><span class="line"><span class="keyword">const</span> outFile = fs.createWriteStream(<span class="string">'./extra/fileForCompress1.txt'</span>);</span><br><span class="line"></span><br><span class="line">inFile.pipe(gunzip).pipe(outFile);</span><br></pre></td></tr></table></figure><h2 id="服务端gzip压缩"><a href="#服务端gzip压缩" class="headerlink" title="服务端gzip压缩"></a>服务端gzip压缩</h2><p>代码超级简单。首先判断 是否包含 <strong>accept-encoding</strong>首部，且值为<strong>gzip</strong>。</p><ul><li>否：返回未压缩的文件</li><li>是：返回gzip压缩后的文件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> filePath = <span class="string">'./extra/fileForGzip.html'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> acceptEncoding = req.headers[<span class="string">'accept-encoding'</span>]</span><br><span class="line">  <span class="keyword">let</span> gzip;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (acceptEncoding.indexOf(<span class="string">'gizp'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">    gzip = zlib.createGzip()</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Encoding'</span>: <span class="string">'gzip'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    fs.createReadStream(filePath).pipe(gzip).pipe(res)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fs.createReadStream(filePath).pipe(res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="string">'3000'</span>)</span><br></pre></td></tr></table></figure><h2 id="服务端字符串gzip压缩"><a href="#服务端字符串gzip压缩" class="headerlink" title="服务端字符串gzip压缩"></a>服务端字符串gzip压缩</h2><p>代码跟前面例子大同小异。这里采用了<strong>zlib.gzipSync(str)</strong> 对字符串进行gzip压缩。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> responseText = <span class="string">'hello world'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> acceptEncoding = req.headers[<span class="string">'accept-encoding'</span>];</span><br><span class="line">    <span class="keyword">if</span>(acceptEncoding.indexOf(<span class="string">'gzip'</span>)!=<span class="number">-1</span>)&#123;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">            <span class="string">'content-encoding'</span>: <span class="string">'gzip'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.end( zlib.gzipSync(responseText) );</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.end(responseText);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="string">'3000'</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jest简介</title>
      <link href="/2019/05/15/Jest%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/05/15/Jest%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Jest"><a href="#Jest" class="headerlink" title="Jest"></a>Jest</h1><p>jest 是facebook推出的一款测试框架，集成了 Mocha，chai，jsdom，sinon等功能。</p><h3 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev jest</span><br><span class="line">npm install -g jest</span><br></pre></td></tr></table></figure><p>运行命令 jest 后会自动运行项目下所有.test.js和.spec.js这种格式的文件。涉及到运用 ES 或 react 的，要与babel相结合，加上.babelrc文件即可。jest的配置默认只需要在package.json中配置即可，当然也可以用独立的配置文件。</p><p>我们这里直接将 jest 的运行范围限定在test文件夹下，而不是全部，所以在package.json中加入如下配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"jest"</span>: &#123;</span><br><span class="line">   <span class="string">"testRegex"</span>: <span class="string">"/test/.*.test.jsx?$"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到这里的匹配规则是正则表达式</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>和之前介绍的 mocha 和 chai 的功能很像，甚至可以兼容部分 mocha 和 chai 的语法。可以这么写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; shallow &#125; <span class="keyword">from</span> <span class="string">'enzyme'</span></span><br><span class="line"><span class="keyword">import</span> CommentItem <span class="keyword">from</span> <span class="string">'./commentItem'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'测试评论列表项组件'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 这是mocha的玩法，jest可以直接兼容</span></span><br><span class="line">  it(<span class="string">'测试评论内容小于等于200时不出现展开收起按钮'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> propsData = &#123;</span><br><span class="line">      name: <span class="string">'hj'</span>,</span><br><span class="line">      content: <span class="string">'测试标题'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> item = shallow(<span class="xml"><span class="tag">&lt;<span class="name">CommentItem</span> &#123;<span class="attr">...propsData</span>&#125; /&gt;</span>)</span></span><br><span class="line"><span class="xml">    // 这里的断言实际上和chai的expect是很像的</span></span><br><span class="line"><span class="xml">    expect(item.find('.btn-expand').length).toBe(0);</span></span><br><span class="line"><span class="xml">  &#125;)</span></span><br><span class="line"><span class="xml">  // 这是jest的玩法，推荐用这种</span></span><br><span class="line"><span class="xml">  test('两数相加结果为两个数字的和', () =&gt; &#123;</span></span><br><span class="line"><span class="xml">    expect(3).toBe(3);</span></span><br><span class="line"><span class="xml">  &#125;);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="jest与eslint检测"><a href="#jest与eslint检测" class="headerlink" title="jest与eslint检测"></a>jest与eslint检测</h3><p>如果看了上面的代码会发现我没有引用任何类似于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> *  <span class="keyword">from</span> <span class="string">'jest'</span></span><br></pre></td></tr></table></figure><p>的代码，而那个expect是没有定义的。<br>这段代码直接运行jest命令没有任何问题，但是eslint会检测出错，对于这种情况，我们可以再eslint配置文件.eslintrc中加入以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"env"</span>: &#123;</span><br><span class="line">  <span class="string">"jest"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jest的断言"><a href="#jest的断言" class="headerlink" title="jest的断言"></a>jest的断言</h3><p>jest有自己的断言玩法。除了前面的代码中已经写到的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expect(x).toBe(y)<span class="comment">//判断相等，使用Object.is实现</span></span><br></pre></td></tr></table></figure><p>还有常用的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">expect(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;).toBe(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;)<span class="comment">//判断两个对象是否相等</span></span><br><span class="line">expect(<span class="number">1</span>).not.toBe(<span class="number">2</span>)<span class="comment">//判断不等</span></span><br><span class="line">expect(n).toBeNull(); <span class="comment">//判断是否为null</span></span><br><span class="line">expect(n).toBeUndefined(); <span class="comment">//判断是否为undefined</span></span><br><span class="line">expect(n).toBeDefined(); <span class="comment">//判断结果与toBeUndefined相反</span></span><br><span class="line">expect(n).toBeTruthy(); <span class="comment">//判断结果为true</span></span><br><span class="line">expect(n).toBeFalsy(); <span class="comment">//判断结果为false</span></span><br><span class="line">expect(value).toBeGreaterThan(<span class="number">3</span>); <span class="comment">//大于3</span></span><br><span class="line">expect(value).toBeGreaterThanOrEqual(<span class="number">3.5</span>); <span class="comment">//大于等于3.5</span></span><br><span class="line">expect(value).toBeLessThan(<span class="number">5</span>); <span class="comment">//小于5</span></span><br><span class="line">expect(value).toBeLessThanOrEqual(<span class="number">4.5</span>); <span class="comment">//小于等于4.5</span></span><br><span class="line">expect(value).toBeCloseTo(<span class="number">0.3</span>); <span class="comment">// 浮点数判断相等</span></span><br><span class="line">expect(<span class="string">'Christoph'</span>).toMatch(<span class="regexp">/stop/</span>); <span class="comment">//正则表达式判断</span></span><br><span class="line">expect([<span class="string">'one'</span>,<span class="string">'two'</span>]).toContain(<span class="string">'one'</span>); <span class="comment">//不解释</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compileAndroidCode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ConfigError(<span class="string">'you are using the wrong JDK'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="string">'compiling android goes as expected'</span>, () =&gt; &#123;</span><br><span class="line">  expect(compileAndroidCode).toThrow();</span><br><span class="line">  expect(compileAndroidCode).toThrow(ConfigError); <span class="comment">//判断抛出异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://jestjs.io/docs/en/expect.html" target="_blank" rel="noopener">更多断言玩法</a></p><h3 id="jest的-mock"><a href="#jest的-mock" class="headerlink" title="jest的 mock"></a>jest的 mock</h3><p>介绍了jest替代mocha和chai的部分，那么接下来就看看如何替代sinon。<br>下面是官网的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach</span>(<span class="params">items, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; items.length; index++) &#123;</span><br><span class="line">   callback(items[index]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mockCallback = jest.fn();</span><br><span class="line">forEach([<span class="number">0</span>, <span class="number">1</span>], mockCallback);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否被执行两次</span></span><br><span class="line">expect(mockCallback.mock.calls.length).toBe(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断函数被首次执行的第一个形参为0</span></span><br><span class="line">expect(mockCallback.mock.calls[<span class="number">0</span>][<span class="number">0</span>]).toBe(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断函数第二次被执行的第一个形参为1</span></span><br><span class="line">expect(mockCallback.mock.calls[<span class="number">1</span>][<span class="number">0</span>]).toBe(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>从上面可以看到这种玩法很类似于sinon的 sinon.spy()。当然也有类似于stub返回值的那种玩法，更多的请参考 <a href="https://jestjs.io/docs/en/mock-functions.html" target="_blank" rel="noopener">jest mock的更多玩法</a></p><h3 id="mock文件和css-module的问题"><a href="#mock文件和css-module的问题" class="headerlink" title="mock文件和css module的问题"></a>mock文件和css module的问题</h3><p>如果js文件中引用了css或者本地其他文件，那么就可能测试失败。为了解决这个问题，同时也为了提高测试效率：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"jest"</span>: &#123;</span><br><span class="line">    <span class="string">"moduleNameMapper"</span>: &#123;</span><br><span class="line">     <span class="string">"\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$"</span>: <span class="string">"&lt;rootDir&gt;/test/config/fileMock.js"</span>,</span><br><span class="line">     <span class="string">"\\.(css|less)$"</span>: <span class="string">"identity-obj-proxy"</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>而fileMock.js文件内容为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">'test-file-stub'</span>;</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>然后安装identity-obj-proxy即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev identity-obj-proxy</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h3 id="jest与别名"><a href="#jest与别名" class="headerlink" title="jest与别名"></a>jest与别名</h3><p>在webpack中经常会用到别名，而jest测试时，如果文件中引用了别名会出现找不到文件的问题。毕竟jest测试时没有经过webpack处理。对于以下玩法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;  </span><br><span class="line">    alias: &#123;  </span><br><span class="line">        common: path.resolve(__dirname, <span class="string">'plugins/common/'</span>)  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"jest"</span>: &#123;</span><br><span class="line">    <span class="string">"testRegex"</span>: <span class="string">"./src/test/.*.test.js$"</span>,</span><br><span class="line">    <span class="string">"moduleNameMapper"</span>: &#123;</span><br><span class="line">      <span class="string">"^common(.*)$"</span>: <span class="string">"&lt;rootDir&gt;/plugins/common$1"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个和之前 mock文件和css module的问题 一样，都是使用了moduleNameMapper这个属性</p><h3 id="生成测试覆盖率报告"><a href="#生成测试覆盖率报告" class="headerlink" title="生成测试覆盖率报告"></a>生成测试覆盖率报告</h3><p>只需要在jest命令后加入 –coverage即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jest --coverage</span><br></pre></td></tr></table></figure><p><img src="https://gitlab.com/zhangjiale/ifile/raw/master/jest.webp" alt="打印结果"></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 开发测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub自动部署</title>
      <link href="/2019/02/21/GitHub%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/02/21/GitHub%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub自动部署代码"><a href="#GitHub自动部署代码" class="headerlink" title="GitHub自动部署代码"></a>GitHub自动部署代码</h1><p><a href="https://github.com/zhangjialegh/WebHooks" target="_blank" rel="noopener">Demo地址</a></p><h2 id="第一步：添加webhooks"><a href="#第一步：添加webhooks" class="headerlink" title="第一步：添加webhooks"></a>第一步：添加webhooks</h2><p><img src="https://gitlab.com/zhangjiale/ifile/raw/master/webhooks1.jpg" alt="image"></p><p><img src="https://gitlab.com/zhangjiale/ifile/raw/master/webhooks2.jpg" alt="image"></p><h2 id="第二部：可以选择nginx反向代理"><a href="#第二部：可以选择nginx反向代理" class="headerlink" title="第二部：可以选择nginx反向代理"></a>第二部：可以选择nginx反向代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    location /webhooks/ &#123;</span><br><span class="line">       proxy_pass http://localhost:8003/webhooks/;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三部：配置后端接口和自动部署脚本"><a href="#第三部：配置后端接口和自动部署脚本" class="headerlink" title="第三部：配置后端接口和自动部署脚本"></a>第三部：配置后端接口和自动部署脚本</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** 配置路由</span></span><br><span class="line"><span class="comment">* @router.js</span></span><br><span class="line"><span class="comment">* @handler : (Function) 执行函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/webhooks/xx'</span>, handler)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 执行函数</span></span><br><span class="line"><span class="comment">* @handler : (Function) 执行函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这里我选择用 child_process 执行脚本文件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 脚本文件</span></span><br><span class="line"><span class="comment">* @deploy.sh</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网路基础TCP/IP</title>
      <link href="/2019/01/11/%E7%BD%91%E8%B7%AF%E5%9F%BA%E7%A1%80TCP-IP/"/>
      <url>/2019/01/11/%E7%BD%91%E8%B7%AF%E5%9F%BA%E7%A1%80TCP-IP/</url>
      
        <content type="html"><![CDATA[<h1 id="网络基础-TCP-IP"><a href="#网络基础-TCP-IP" class="headerlink" title="网络基础 TCP/IP"></a>网络基础 TCP/IP</h1><p>为了理解HTTP，我们有必要事先了解一下TCP/IP协议族。 通常使用的网络（包括互联网）是在 TCP/IP 协议族的基础上运作 的。而HTTP属于它内部的一个子集。 接下来，我们仅介绍理解HTTP所需掌握的TCP/IP协议族的概要。若 想进一步学习有关TCP/IP的知识，请参考其他讲解TCP/IP的专业书籍</p><h2 id="TCP-IP-协议族"><a href="#TCP-IP-协议族" class="headerlink" title="　TCP/IP 协议族"></a>　TCP/IP 协议族</h2><p>计算机与网络设备要相互通信，双方就必须基于相同的方法。比<br>如，如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通 信、怎样结束通信等规则都需要事先确定。不同的硬件、操作系统之间 的通信，所有的这一切都需要一种规则。而我们就把这种规则称为协议 （protocol）。</p><p>协议中存在各式各样的内容。从电缆的规格到IP 地址的选定方法、寻找异地用户的方法、双方建立通信的顺序，以及Web 页面显示需要处理的步骤，等等。像这样把与互联网相关联的协议集合起来总称为 TCP/IP。也有说<br>法认为，TCP/IP是指TCP 和IP 这两种协议。还有一种说法认为，TCP/IP 是在IP 协议的通信过程中，使用到的协议族的统称。</p><h2 id="TCP-IP的分层管理"><a href="#TCP-IP的分层管理" class="headerlink" title="TCP/IP的分层管理"></a>TCP/IP的分层管理</h2><p>TCP/IP协议族里重要的一点就是分层。TCP/IP协议族按层次分别分为以下4 层：应用层、传输层、网络层和数据链路层。</p><p>把TCP/IP层次化是有好处的。比如，如果互联网只由一个协议统筹，某个地方需要改变设计时，就必须把所有部分整体替换掉。而分层之后只需把变动的层替换掉即可。把各层之间的接口部分规划好之后，每个层次内部的设计就能够自由改动了。</p><p>值得一提的是，层次化之后，设计也变得相对简单了。处于应用层上的应用可以只考虑分派给自己的任务，而不需要弄清对方在地球上哪个地方、对方的传输路线是怎样的、是否能确保传输送达等问题。</p><p>TCP/IP协议族各层的作用如下。</p><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>应用层决定了向用户提供应用服务时通信的活动。</p><p>TCP/IP 协议族内预存了各类通用的应用服务。比如，FTP （File Transfer Protocol，文件传输协议）和 DNS（Domain Name System，域名系统）服务就是其中两类。</p><p>HTTP 协议也处于该层。</p><h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。</p><p>在传输层有两个性质不同的协议：TCP （Transmission Control Protocol，传输控制协议）和UDP（User Data Protocol ，用户数据报协议）。</p><h3 id="网络层（又名网络互连层）"><a href="#网络层（又名网络互连层）" class="headerlink" title="网络层（又名网络互连层）"></a>网络层（又名网络互连层）</h3><p>网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。该层规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方。</p><p>与对方计算机之间通过多台计算机或网络设备进行传输时，网络层所起的作用就是在众多的选项内选择一条传输路线。</p><h3 id="链路层（又名数据链路层，网络接口层）"><a href="#链路层（又名数据链路层，网络接口层）" class="headerlink" title="链路层（又名数据链路层，网络接口层）"></a>链路层（又名数据链路层，网络接口层）</h3><p>用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱动、NIC（Network Interface Card，网络适配器，即网卡），及光纤等物理可见部分（还包括连接器等一切传输媒介）。硬件上的范畴均在链路层的作用范围之内。</p><h2 id="TCP-IP通信传输流"><a href="#TCP-IP通信传输流" class="headerlink" title="TCP/IP通信传输流"></a>TCP/IP通信传输流</h2><p><img src="https://gitlab.com/zhangjiale/ifile/raw/master/tcp1.jpg" alt="tcp"></p><p>利用TCP/IP协议族进行网络通信时，会通过分层顺序与对方进行通信。发送端从应用层往下走，接收端则往应用层往上走。</p><p>我们用HTTP 举例来说明，首先作为发送端的客户端在应用层（HTTP 协议）发出一个想看某个Web 页面的HTTP 请求。</p><p>接着，为了传输方便，在传输层（TCP 协议）把从应用层处收到的数据（HTTP 请求报文）进行分割，并在各个报文上打上标记序号及端口号后转发给网络层。</p><p>在网络层（IP 协议），增加作为通信目的地的 MAC地址后转发给链路层。这样一来，发往网络的通信请求就准备齐全了。</p><p>接收端的服务器在链路层接收到数据，按序往上层发送，一直到应用层。当传输到应用层，才能算真正接收到由客户端发送过来的HTTP<br>请求。</p><p><img src="https://gitlab.com/zhangjiale/ifile/raw/master/tcp2.jpg" alt="tcp"></p><p>发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该层所属的首部信息。反之，接收端在层与层传输数据时，每经过一层时会把对应的首部消去。</p><p>这种把数据信息包装起来的做法称为封装（encapsulate ）。</p><h2 id="与HTTP关系密切的协议：IP、TCP和DNS"><a href="#与HTTP关系密切的协议：IP、TCP和DNS" class="headerlink" title="与HTTP关系密切的协议：IP、TCP和DNS"></a>与HTTP关系密切的协议：IP、TCP和DNS</h2><p>下面我们分别针对在TCP/IP协议族中与HTTP密不可分的 3 个协议（IP 、TCP 和DNS）进行说明。</p><h3 id="负责传输的IP协议"><a href="#负责传输的IP协议" class="headerlink" title="负责传输的IP协议"></a>负责传输的IP协议</h3><p>按层次分，IP （Internet Protocol ）网际协议位于网络层。Internet Protocol 这个名称可能听起来有点夸张，但事实正是如此，因为几乎所有使用网络的系统都会用到IP 协议。TCP/IP协议族中的IP 指的就是网<br>际协议，协议名称中占据了一半位置，其重要性可见一斑。可能有人会把“IP ”和“IP 地址”搞混，“IP ”其实是一种协议的名称。</p><p>IP 协议的作用是把各种数据包传送给对方。而要保证确实传送到对方那里，则需要满足各类条件。其中两个重要的条件是IP 地址和MAC地址（Media Access Control Address）。</p><p>IP 地址指明了节点被分配到的地址，MAC地址是指网卡所属的固定地址。IP 地址可以和MAC地址进行配对。IP 地址可变换，但MAC地址基本上不会更改。</p><h4 id="使用ARP协议凭借MAC地址进行通信"><a href="#使用ARP协议凭借MAC地址进行通信" class="headerlink" title="使用ARP协议凭借MAC地址进行通信"></a>使用ARP协议凭借MAC地址进行通信</h4><p>IP 间的通信依赖MAC地址。在网络上，通信的双方在同一局域网（LAN）内的情况是很少的，通常是经过多台计算机和网络设备中转才能连接到对方。而在进行中转时，会利用下一站中转设备的MAC地址来搜索下一个中转目标。这时，会采用ARP 协议（Address Resolution Protocol）。ARP 是一种用以解析地址的协议，根据通信方的IP 地址就可以反查出对应的MAC地址。</p><h4 id="没有人能够全面掌握互联网中的传输状况"><a href="#没有人能够全面掌握互联网中的传输状况" class="headerlink" title="没有人能够全面掌握互联网中的传输状况"></a>没有人能够全面掌握互联网中的传输状况</h4><p>在到达通信目标前的中转过程中，那些计算机和路由器等网络设备只能获悉很粗略的传输路线。</p><p>这种机制称为路由选择（routing ），有点像快递公司的送货过程。想要寄快递的人，只要将自己的货物送到集散中心，就可以知道快递公司是否肯收件发货，该快递公司的集散中心检查货物的送达地址，明确下站该送往哪个区域的集散中心。接着，那个区域的集散中心自会判断是否能送到对方的家中。</p><p>我们是想通过这个比喻说明，无论哪台计算机、哪台网络设备，它们都无法全面掌握互联网中的细节。</p><p><img src="https://gitlab.com/zhangjiale/ifile/raw/master/tcp3.jpg" alt="tcp"></p><h3 id="确保可靠性的TCP协议"><a href="#确保可靠性的TCP协议" class="headerlink" title="确保可靠性的TCP协议"></a>确保可靠性的TCP协议</h3><p>按层次分，TCP 位于传输层，提供可靠的字节流服务。</p><p>所谓的字节流服务（Byte Stream Service）是指，为了方便传输，将大块数据分割成以报文段（segment）为单位的数据包进行管理。而可靠的传输服务是指，能够把数据准确可靠地传给对方。一言以蔽之，TCP 协议为了更容易传送大数据才把数据分割，而且TCP 协议能够确认数据最终是否送达到对方。</p><h4 id="确保数据能到达目标"><a href="#确保数据能到达目标" class="headerlink" title="确保数据能到达目标"></a>确保数据能到达目标</h4><p>为了准确无误地将数据送达目标处，TCP 协议采用了三次握手（three-way handshaking ）策略。用TCP 协议把数据包送出去后，TCP不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。握手过程中使用了TCP 的标志（flag ）——SYN（synchronize ）和ACK（acknowledgement）。 </p><p>发送端首先发送一个带SYN标志的数据包给对方。接收端收到后，回传一个带有SYN/ACK 标志的数据包以示传达确认信息。最后，发送端再回传一个带ACK标志的数据包，代表“握手”结束。</p><p>若在握手过程中某个阶段莫名中断，TCP 协议会再次以相同的顺序发送相同的数据包。</p><p><img src="https://gitlab.com/zhangjiale/ifile/raw/master/tcp4.jpg" alt="tcp"></p><p>除了上述三次握手，TCP 协议还有其他各种手段来保证通信的可靠性。</p><h2 id="负责域名解析的DNS服务"><a href="#负责域名解析的DNS服务" class="headerlink" title="负责域名解析的DNS服务"></a>负责域名解析的DNS服务</h2><p>DNS（Domain Name System）服务是和HTTP 协议一样位于应用层的协议。它提供域名到IP 地址之间的解析服务。</p><p>计算机既可以被赋予IP 地址，也可以被赋予主机名和域名。比如<a href="http://www.hackr.jp。" target="_blank" rel="noopener">www.hackr.jp。</a></p><p>用户通常使用主机名或域名来访问对方的计算机，而不是直接通过IP 地址访问。因为与IP 地址的一组纯数字相比，用字母配合数字的表示形式来指定计算机名更符合人类的记忆习惯。</p><p>但要让计算机去理解名称，相对而言就变得困难了。因为计算机更擅长处理一长串数字。</p><p>为了解决上述的问题，DNS服务应运而生。DNS协议提供通过域名查找IP 地址，或逆向从IP 地址反查域名的服务。</p><p><img src="https://gitlab.com/zhangjiale/ifile/raw/master/tcp5.jpg" alt="tcp"></p><h2 id="各种协议与HTTP协议的关系"><a href="#各种协议与HTTP协议的关系" class="headerlink" title="各种协议与HTTP协议的关系"></a>各种协议与HTTP协议的关系</h2><p>学习了和HTTP 协议密不可分的TCP/IP协议族中的各种协议后，我们再通过这张图来了解下IP 协议、TCP 协议和DNS服务在使用HTTP 协议的通信过程中各自发挥了哪些作用。</p><p><img src="https://gitlab.com/zhangjiale/ifile/raw/master/tcp6.jpg" alt="tcp"></p>]]></content>
      
      
      <categories>
          
          <category> web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Koa中间件的开发和使用</title>
      <link href="/2018/10/08/koa%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/10/08/koa%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="koa中间件开发和使用"><a href="#koa中间件开发和使用" class="headerlink" title="koa中间件开发和使用"></a>koa中间件开发和使用</h1><ul><li>koa v1和v2中使用到的中间件的开发和使用</li><li>generator 中间件开发在koa v1和v2中使用</li><li>async await 中间件开发和只能在koa v2中使用</li></ul><h2 id="generator中间件开发"><a href="#generator中间件开发" class="headerlink" title="generator中间件开发"></a>generator中间件开发</h2><h3 id="generator中间件开发-1"><a href="#generator中间件开发-1" class="headerlink" title="generator中间件开发"></a>generator中间件开发</h3><blockquote><p>generator中间件返回的应该是function * () 函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ./middleware/logger-generator.js */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"> ctx </span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( ctx.method, ctx.header.host + ctx.url )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> * (<span class="params"> next </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行中间件的操作</span></span><br><span class="line">        log( <span class="keyword">this</span> )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( next ) &#123;</span><br><span class="line">            <span class="keyword">yield</span> next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="generator中间件在koa-1中的使用"><a href="#generator中间件在koa-1中的使用" class="headerlink" title="generator中间件在koa@1中的使用"></a>generator中间件在koa@1中的使用</h3><blockquote><p>generator 中间件在koa v1中可以直接use使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)  <span class="comment">// koa v1</span></span><br><span class="line"><span class="keyword">const</span> loggerGenerator  = <span class="built_in">require</span>(<span class="string">'./middleware/logger-generator'</span>)</span><br><span class="line"><span class="keyword">const</span> app = koa()</span><br><span class="line"></span><br><span class="line">app.use(loggerGenerator())</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> *(<span class="params"> </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.body = <span class="string">'hello world!'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'the server is starting at port 3000'</span>)</span><br></pre></td></tr></table></figure><h3 id="generator中间件在koa-2中的使用"><a href="#generator中间件在koa-2中的使用" class="headerlink" title="generator中间件在koa@2中的使用"></a>generator中间件在koa@2中的使用</h3><blockquote><p>generator 中间件在koa v2中需要用koa-convert封装一下才能使用<br>注：koa-convert的GitHub地址 <a href="https://github.com/koajs/convert" target="_blank" rel="noopener">https://github.com/koajs/convert</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>) <span class="comment">// koa v2</span></span><br><span class="line"><span class="keyword">const</span> convert = <span class="built_in">require</span>(<span class="string">'koa-convert'</span>)</span><br><span class="line"><span class="keyword">const</span> loggerGenerator  = <span class="built_in">require</span>(<span class="string">'./middleware/logger-generator'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line">app.use(convert(loggerGenerator()))</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params"> ctx </span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.body = <span class="string">'hello world!'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'the server is starting at port 3000'</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="async中间件开发"><a href="#async中间件开发" class="headerlink" title="async中间件开发"></a>async中间件开发</h2><h3 id="async-中间件开发"><a href="#async-中间件开发" class="headerlink" title="async 中间件开发"></a>async 中间件开发</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ./middleware/logger-async.js */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"> ctx </span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( ctx.method, ctx.header.host + ctx.url )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"> ctx, next </span>) </span>&#123;</span><br><span class="line">    log(ctx);</span><br><span class="line">    <span class="keyword">await</span> next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="async-中间件在koa-2中使用"><a href="#async-中间件在koa-2中使用" class="headerlink" title="async 中间件在koa@2中使用"></a>async 中间件在koa@2中使用</h3><blockquote><p>async 中间件只能在 koa v2中使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>) <span class="comment">// koa v2</span></span><br><span class="line"><span class="keyword">const</span> loggerAsync  = <span class="built_in">require</span>(<span class="string">'./middleware/logger-async'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line">app.use(loggerAsync())</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params"> ctx </span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.body = <span class="string">'hello world!'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'the server is starting at port 3000'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>原文链接： <a href="https://chenshenhai.github.io/koa2-note/note/start/middleware.html" target="_blank" rel="noopener">https://chenshenhai.github.io/koa2-note/note/start/middleware.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代器和生成器</title>
      <link href="/2018/07/08/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2018/07/08/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h1><hr><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> something = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> nextVal;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// for..of循环需要</span></span><br><span class="line">      [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>; &#125;,</span><br><span class="line">    <span class="comment">// 标准迭代器接口方法 </span></span><br><span class="line">      next: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nextVal === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            nextVal = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nextVal = (<span class="number">3</span> * nextVal) + <span class="number">6</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>:<span class="literal">false</span>, <span class="attr">value</span>:nextVal &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;; &#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    something.next().value; <span class="comment">// 1</span></span><br><span class="line">    something.next().value; <span class="comment">// 9</span></span><br><span class="line">    something.next().value; <span class="comment">// 33</span></span><br><span class="line">    something.next().value; <span class="comment">// 105</span></span><br></pre></td></tr></table></figure><blockquote><p>我们将在4.2.2节解释为什么在这段代码中需要[Symbol.iterator]: ..这 一部分。从语法上说，这涉及了两个ES6特性。首先，[ .. ] 语法被称为计算属性名(参见本系列的《你不知道的JavaScript(上卷)》的“this和对象原型”部分)。这在对象术语定义中是指，指定一个表达式并用这个表达式的结果作为属性的名称。另外，Symbol.iterator是ES6预定义的特殊Symbol值之一(参见本系列的《你不知道的JavaScript(下卷)》的“ES6&amp;Beyond”部分)。</p></blockquote><p>ES6 还新增了一个 for..of 循环，这意味着可以通过原生循环语法自动迭代标准迭代器:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> v <span class="keyword">of</span> something) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log( v );</span><br><span class="line">    <span class="comment">// 不要死循环!</span></span><br><span class="line">    <span class="keyword">if</span> (v &gt; <span class="number">500</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 9 33 105 321 969</span></span><br></pre></td></tr></table></figure><p>for..of 循环在每次迭代中自动调用 next()，它不会向 next() 传入任何值，并且会在接收 到 done:true 之后自动停止。这对于在一组数据上循环很方便。<br>当然，也可以手工在迭代器上循环，调用 next() 并检查 done:true 条件来确定何时停止循 环:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> <span class="keyword">ret</span>;(<span class="keyword">ret</span> = something.next()) &amp;&amp; !<span class="keyword">ret</span>.done; )&#123;</span><br><span class="line">     console.<span class="built_in">log</span>( <span class="keyword">ret</span>.value );</span><br><span class="line">    <span class="comment">// 不要死循环!</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">ret</span>.value &gt; 500) &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 9 33 105 321 969</span></span><br></pre></td></tr></table></figure></p><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>可以通过生成器实现前面的这个 something 无限数字序列生产者，类似这样:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">something</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nextVal;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nextVal === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            nextVal = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nextVal = (<span class="number">3</span> * nextVal) + <span class="number">6</span>;</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="keyword">yield</span> nextVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通常在实际的 JavaScript程序中使用while..true循环是非常糟糕的主意，至 少如果其中没有 break 或 return 的话是这样，因为它有可能会同步地无限循 环，并阻塞和锁住浏览器UI。但是，如果在生成器中有yield的话，使用这样的循环就完全没有问题。因为生成器会在每次迭代中暂停，通过yield返回到主程序或事件循环队列中。简单地说就是:“生成器把 while..true带回了JavaScript 编程的世界!”</p></blockquote><p>如果在生成器内有 try..finally 语句，它将总是运行，即使生成器已经外部结束。如果需 要清理资源的话(数据库连接等)，这一点非常有用:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> *<span class="title">something</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> nextVal;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nextVal === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                nextVal = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nextVal = (<span class="number">3</span> * nextVal) + <span class="number">6</span>;</span><br><span class="line">            &#125;</span><br><span class="line">                <span class="keyword">yield</span> nextVal;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">// 清理子句</span></span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">"cleaning up!"</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前的例子中，for..of 循环内的 break 会触发 finally 语句。但是，也可以在外部通过<br>return(..) 手工终止生成器的迭代器实例:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> it = something();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> v <span class="keyword">of</span> it) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log( v );</span><br><span class="line">    <span class="comment">// 不要死循环</span></span><br><span class="line">   <span class="keyword">if</span> (v &gt; <span class="number">500</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">            <span class="comment">// 完成生成器的迭代器</span></span><br><span class="line">            it.return( <span class="string">"Hello World"</span> ).value</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 这里不需要</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 9 33 105 321 969 // 清理!</span></span><br><span class="line"><span class="comment">// Hello World</span></span><br></pre></td></tr></table></figure></p><p>调用 it.return(..) 之后，它会立即终止生成器，这当然会运行 finally 语句。另外，它 还会把返回的 value 设置为传入 return(..) 的内容，这也就是 “Hello World” 被传出 去的过程。现在我们也不需要包含 break 语句了，因为生成器的迭代器已经被设置为 done:true，所以 for..of 循环会在下一个迭代终止。</p><h4 id="支持Promise的Generator-Runner"><a href="#支持Promise的Generator-Runner" class="headerlink" title="支持Promise的Generator Runner"></a>支持Promise的Generator Runner</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>,<span class="number">1</span>),it;</span><br><span class="line">  it = gen.apply( <span class="keyword">this</span>, args );</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">    .then( <span class="function"><span class="keyword">function</span> <span class="title">handleNext</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//对下一个yield出的值运行</span></span><br><span class="line">    <span class="keyword">var</span> next = it.next(value);</span><br><span class="line">    <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span> <span class="title">handleResult</span>(<span class="params">next</span>)</span>&#123;</span><br><span class="line">      <span class="comment">//生成器运行完毕了吗</span></span><br><span class="line">      <span class="keyword">if</span>(next.done) &#123;</span><br><span class="line">        <span class="keyword">return</span> next.value</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 否则继续运行</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve( next.value )</span><br><span class="line">             .then(</span><br><span class="line">               <span class="comment">// 成功就恢复异步循环，把决议的值发回生成器handleNext,</span></span><br><span class="line">               <span class="comment">// 如果value是被拒绝的Promise</span></span><br><span class="line">               <span class="comment">// 就把错误传回去生成器进行错误处理</span></span><br><span class="line">               <span class="function"><span class="keyword">function</span> <span class="title">handleErr</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                 <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(</span><br><span class="line">                   it.throw(err)</span><br><span class="line">                 )</span><br><span class="line">                 .then(handleResult)</span><br><span class="line">               &#125;</span><br><span class="line">             )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)(next)</span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="手都变换生成器"><a href="#手都变换生成器" class="headerlink" title="手都变换生成器"></a>手都变换生成器</h4><p>为了理解这样的代码是如何编写的，我们先给生成器的各个部分标注上状 态值:<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request(...)是一个支持Promise的Ajax工具</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//状态1</span></span><br><span class="line">    <span class="title">try</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'requestion:'</span>, <span class="built_in">url</span>)</span><br><span class="line">        <span class="keyword">var</span> TMP1 = request(<span class="built_in">url</span>)</span><br><span class="line">        <span class="comment">//状态2</span></span><br><span class="line">        <span class="keyword">var</span> val = <span class="keyword">yield</span> TMP1;</span><br><span class="line">        <span class="built_in">console</span>.log(val)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(err)&#123;</span><br><span class="line">        <span class="comment">//状态3</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Oops:'</span>,err);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>回到我们翻译的生成器，让我们在闭包中定义一个变量 state 用于跟踪状态:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//管理生成器状态</span></span><br><span class="line">    <span class="keyword">var</span> state;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 生成器范围变量声明</span></span><br><span class="line">    <span class="keyword">var</span> val;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (state)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">'requesting:'</span>, url);</span><br><span class="line">              <span class="keyword">return</span> request(url);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">              val = v;</span><br><span class="line">              <span class="built_in">console</span>.log(val);</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">              <span class="keyword">var</span> err  = v;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">'Oopss:'</span>,err);</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造并返回一个生成器</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        next: <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 初始状态</span></span><br><span class="line">            <span class="keyword">if</span>(!state) &#123;</span><br><span class="line">                state = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    done: <span class="literal">false</span>,</span><br><span class="line">                    value: process()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// yield成功恢复</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>( state == <span class="number">1</span> ) &#123;</span><br><span class="line">                state = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    done: <span class="literal">true</span>,</span><br><span class="line">                    value: process(v)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 生成器已经完成</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    done: <span class="literal">true</span>,</span><br><span class="line">                    value: <span class="literal">undefined</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'throw'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//唯一的显式错误处理在状态1</span></span><br><span class="line">            <span class="keyword">if</span>(state == <span class="number">1</span>)&#123;</span><br><span class="line">                state = <span class="number">3</span>;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    done: <span class="literal">true</span>,</span><br><span class="line">                    value: process(e)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 否则错误就不会处理，所以只把它抛回</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Redux中间件</title>
      <link href="/2018/07/07/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redux%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2018/07/07/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redux%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近几天对 redux 的中间件进行了一番梳理，又看了 redux-saga 的文档，和 redux-thunk 和 redux-promise 的源码，结合前段时间看的redux的源码的一些思考，感觉对 redux 中间件的有了更加深刻的认识，因此总结一下。</p><h3 id="Redux中间件机制"><a href="#Redux中间件机制" class="headerlink" title="Redux中间件机制"></a>Redux中间件机制</h3><p>Redux本身就提供了非常强大的数据流管理功能，但这并不是它唯一的强大之处，它还提供了利用中间件来扩展自身功能，以满足用户的开发需求。首先我们来看中间件的定义：</p><blockquote><p>It provides a third-party extension point between dispatching an action, and the moment it reaches<br>the reducer.</p></blockquote><p>这是Dan Abramov 对middleware的描述。简单来讲，Redux middleware 提供了一个分类处理 action 的机会。在 middleware 中，我们可以检阅每一个流过的 action,并挑选出特定类型的 action 进行相应操作，以此来改变 action。这样说起来可能会有点抽象，我们直接来看图，这是在没有中间件情况下的 redux 的数据流：</p><p><img src="https://gitlab.com/zhangjiale/ifile/raw/master/4116027-99bdd0c96ba2bbd3.png" alt="输入图片说明"></p><p>上面是很典型的一次 redux 的数据流的过程，但在增加了 middleware 后，我们就可以在这途中对 action 进行截获，并进行改变。且由于业务场景的多样性，单纯的修改 dispatch 和 reduce 人显然不能满足大家的需要，因此对 redux middleware 的设计是可以自由组合，自由插拔的插件机制。也正是由于这个机制，我们在使用 middleware 时，我们可以通过串联不同的 middleware 来满足日常的开发，每一个 middleware 都可以处理一个相对独立的业务需求且相互串联：</p><p><img src="https://gitlab.com/zhangjiale/ifile/raw/master/4116027-993b5e2ebc72a5a1.png" alt></p><p>如上图所示，派发给 redux Store 的 action 对象，会被 Store 上的多个中间件依次处理，如果把 action 和当前的 state 交给 reducer 处理的过程看做默认存在的中间件，那么其实所有的对 action 的处理都可以有中间件组成的。值得注意的是这些中间件会按照指定的顺序一次处理传入的 action，只有排在前面的中间件完成任务之后，后面的中间件才有机会继续处理 action，同样的，每个中间件都有自己的“熔断”处理,当它认为这个 action 不需要后面的中间件进行处理时，后面的中间件也就不能再对这个 action 进行处理了。</p><p>而不同的中间件之所以可以组合使用，是因为 Redux 要求所有的中间件必须提供统一的接口，每个中间件的尉氏县逻辑虽然不一样，但只要遵循统一的接口就能和redux以及其他的中间件对话了。</p><h3 id="理解中间价的机制"><a href="#理解中间价的机制" class="headerlink" title="理解中间价的机制"></a>理解中间价的机制</h3><p>由于redux 提供了 applyMiddleware 方法来加载 middleware，因此我们首先可以看一下 redux 中关于 applyMiddleware 的源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">createStore</span> =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 利用传入的createStore和reducer和创建一个store</span></span><br><span class="line">    <span class="keyword">const</span> store = createStore(...args)</span><br><span class="line">    <span class="keyword">let</span> dispatch = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      dispatch: <span class="function">(<span class="params">...args</span>) =&gt;</span> dispatch(...args)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 让每个 middleware 带着 middlewareAPI 这个参数分别执行一遍</span></span><br><span class="line">    <span class="keyword">const</span> chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class="line">    <span class="comment">// 接着 compose 将 chain 中的所有匿名函数，组装成一个新的函数，即新的 dispatch</span></span><br><span class="line">    dispatch = compose(...chain)(store.dispatch)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到applyMiddleware的源码非常简单，但却非常精彩，具体的解读可以看我的这篇文章：</p><h4 id="redux源码解读"><a href="#redux源码解读" class="headerlink" title="redux源码解读"></a>redux源码解读</h4><p>从上面的代码我们不难看出，applyMiddleware 这个函数的核心就在于在于组合 compose，通过将不同的 middlewares 一层一层包裹到原生的 dispatch 之上，然后对 middleware 的设计采用柯里化的方式，以便于compose ，从而可以动态产生 next 方法以及保持 store 的一致性。</p><p>说起来可能有点绕，直接来看一个啥都不干的中间件是如何实现的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> doNothingMidddleware = <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> <span class="function"><span class="params">next</span> =&gt;</span> <span class="function"><span class="params">action</span> =&gt;</span> next(action)</span><br></pre></td></tr></table></figure><p>上面这个函数接受一个对象作为参数，对象的参数上有两个字段 dispatch 和 getState，分别代表着 Redux Store 上的两个同名函数，但需要注意的是并不是所有的中间件都会用到这两个函数。然后 doNothingMidddleware 返回的函数接受一个 next 类型的参数，这个 next 是一个函数，如果调用了它，就代表着这个中间件完成了自己的职能，并将对 action 控制权交予下一个中间件。但需要注意的是，这个函数还不是处理 action 对象的函数，它所返回的那个以 action 为参数的函数才是。最后以 action 为参数的函数对传入的 action 对象进行处理，在这个地方可以进行操作，比如：<br>调动dispatch派发一个新 action 对象<br>调用 getState 获得当前 Redux Store 上的状态<br>调用 next 告诉 Redux 当前中间件工作完毕，让 Redux 调用下一个中间件<br>访问 action 对象 action 上的所有数据<br>在具有上面这些功能后，一个中间件就足够获取 Store 上的所有信息，也具有足够能力可用之数据的流转。看完上面这个最简单的中间件，下面我们来看一下 redux 中间件内，最出名的中间件 redux-thunk 的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createThunkMiddleware</span>(<span class="params">extraArgument</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">&#123; dispatch, getState &#125;</span>) =&gt;</span> <span class="function"><span class="params">next</span> =&gt;</span> <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> action(dispatch, getState, extraArgument);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next(action);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> thunk = createThunkMiddleware();</span><br><span class="line">thunk.withExtraArgument = createThunkMiddleware;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> thunk;</span><br></pre></td></tr></table></figure><p>redux-thunk的代码很简单，它通过函数是变成的思想来设计的，它让每个函数的功能都尽可能的小，然后通过函数的嵌套组合来实现复杂的功能，我上面写的那个最简单的中间件也是如此（当然那是个瓜皮中间件）。redux-thunk 中间件的功能也很简单。首先检查参数 action 的类型，如果是函数的话，就执行这个 action 韩湖水，并把 dispatch, getState, extraArgument 作为参数传递进去，否则就调用 next 让下一个中间件继续处理 action 。</p><p>需要注意的是，每个中间件最里层处理 action 参数的函数返回值都会影响 Store 上的 dispatch 函数的返回值，但每个中间件中这个函数返回值可能都不一样。就比如上面这个 react-thunk 中间件，返回的可能是一个 action 函数，也有可能返回的是下一个中间件返回的结果。因此，dispatch 函数调用的返回结果通常是不可控的，我们最好不要依赖于 dispatch 函数的返回值。</p><h3 id="redux的异步流"><a href="#redux的异步流" class="headerlink" title="redux的异步流"></a>redux的异步流</h3><p>在多种中间件中，处理 redux 异步事件的中间件，绝对占有举足轻重的地位。从简单的 react-thunk 到 redux-promise 再到 redux-saga等等，都代表这各自解决redux异步流管理问题的方案</p><h4 id="redux-thunk"><a href="#redux-thunk" class="headerlink" title="redux-thunk"></a>redux-thunk</h4><p>前面我们已经对redux-thunk进行了讨论，它通过多参数的 currying 以实现对函数的惰性求值，从而将同步的 action 转为异步的 action。在理解了redux-thunk后，我们在实现数据请求时，action就可以这么写了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getWeather</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class="line">        fetch(url, params)</span><br><span class="line">            .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">                dispatch(&#123;</span><br><span class="line">                    type: <span class="string">'GET_WEATHER_SUCCESS'</span>, <span class="attr">payload</span>: result,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                dispatch(&#123;</span><br><span class="line">                    type: <span class="string">'GET_WEATHER_ERROR'</span>, <span class="attr">error</span>: err,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>尽管redux-thunk很简单，而且也很实用，但人总是有追求的，都追求着使用更加优雅的方法来实现redux异步流的控制，这就有了redux-promise。</p><h4 id="redux-promise"><a href="#redux-promise" class="headerlink" title="redux-promise"></a>redux-promise</h4><p>不同的中间件都有着自己的适用场景，react-thunk 比较适合于简单的API请求的场景，而 Promise 则更适合于输入输出操作，比较fetch函数返回的结果就是一个Promise对象，下面就让我们来看下最简单的 Promise 对象是怎么实现的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isFSA &#125; <span class="keyword">from</span> <span class="string">'flux-standard-action'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPromise</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val &amp;&amp; <span class="keyword">typeof</span> val.then === <span class="string">'function'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">promiseMiddleware</span>(<span class="params">&#123; dispatch &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">next</span> =&gt;</span> <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isFSA(action)) &#123;</span><br><span class="line">      <span class="keyword">return</span> isPromise(action)</span><br><span class="line">        ? action.then(dispatch)</span><br><span class="line">        : next(action);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isPromise(action.payload)</span><br><span class="line">      ? action.payload.then(</span><br><span class="line">          result =&gt; dispatch(&#123; ...action, <span class="attr">payload</span>: result &#125;),</span><br><span class="line">          error =&gt; &#123;</span><br><span class="line">            dispatch(&#123; ...action, <span class="attr">payload</span>: error, <span class="attr">error</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      : next(action);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它的逻辑也很简单主要是下面两部分：<br>先判断是不是标准的 flux action。如果不是，那么判断是否是 promise, 是的话就执行 action.then(dispatch)，否则执行 next(action)。<br>如果是, 就先判断 payload 是否是 promise，如果是的话 payload.then 获取数据，然后把数据作为 payload 重新 dispatch({ …action, payload: result}) ；不是的话就执行 next(action)<br>结合 redux-promise 我们就可以利用 es7 的 async 和 await 语法，来简化异步操作了，比如这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchData = <span class="function">(<span class="params">url, params</span>) =&gt;</span> fetch(url, params)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getWeather</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> fetchData(url, params)</span><br><span class="line">    <span class="keyword">if</span> (result.error) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            type: <span class="string">'GET_WEATHER_ERROR'</span>, <span class="attr">error</span>: result.error,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            type: <span class="string">'GET_WEATHER_SUCCESS'</span>, <span class="attr">payload</span>: result,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="redux-saga"><a href="#redux-saga" class="headerlink" title="redux-saga"></a>redux-saga</h4><p>redux-saga是一个管理redux应用异步操作的中间件，用于代替 redux-thunk 的。它通过创建 Sagas 将所有异步操作逻辑存放在一个地方进行集中处理，以此将react中的同步操作与异步操作区分开来，以便于后期的管理与维护。对于Saga，我们可简单定义如下：</p><p>Saga = Worker + Watcher</p><p>redux-saga相当于在Redux原有数据流中多了一层，通过对Action进行监听，从而捕获到监听的Action，然后可以派生一个新的任务对state进行维护（这个看项目本身的需求），通过更改的state驱动View的变更。如下图所示：</p><p><img src="https://gitlab.com/zhangjiale/ifile/raw/master/4116027-0cf60f03d1f7aaaf.png" alt="image"></p><p>saga特点：<br>saga 的应用场景是复杂异步。<br>可以使用 takeEvery 打印 logger（logger大法好），便于测试。<br>提供 takeLatest/takeEvery/throttle 方法，可以便利的实现对事件的仅关注最近实践还是关注每一次实践的时间限频。<br>提供 cancel/delay 方法，可以便利的取消或延迟异步请求。<br>提供 race(effects)，[…effects] 方法来支持竞态和并行场景。<br>提供 channel 机制支持外部事件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">getCurrCity</span>(<span class="params">ip</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">yield</span> call(<span class="string">'/api/getCurrCity.json'</span>, &#123; ip &#125;)</span><br><span class="line">    <span class="keyword">yield</span> put(&#123;</span><br><span class="line">        type: <span class="string">'GET_CITY_SUCCESS'</span>, <span class="attr">payload</span>: data,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">getWeather</span>(<span class="params">cityId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">yield</span> call(<span class="string">'/api/getWeatherInfo.json'</span>, &#123; cityId &#125;)</span><br><span class="line">    <span class="keyword">yield</span> put(&#123;</span><br><span class="line">        type: <span class="string">'GET_WEATHER_SUCCESS'</span>, <span class="attr">payload</span>: data,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadInitData</span>(<span class="params">ip</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> getCurrCity(ip)</span><br><span class="line">    <span class="keyword">yield</span> getWeather(getCityIdWithState(state))</span><br><span class="line">    <span class="keyword">yield</span> put(&#123;</span><br><span class="line">        type: <span class="string">'GET_DATA_SUCCESS'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总的来讲Redux Saga适用于对事件操作有细粒度需求的场景，同时它也提供了更好的可测试性，与可维护性，比较适合对异步处理要求高的大型项目，而小而简单的项目完全可以使用redux-thunk就足以满足自身需求了。毕竟react-thunk对于一个项目本身而言，毫无侵入，使用极其简单，只需引入这个中间件就行了。而react-saga则要求较高，难度较大，我现在也并没有掌握和实践这种异步流的管理方式，因此较为底层的东西先就不讨论了。</p><blockquote><p>参考资料：<br>《深入浅出React和Redux》<br>《深入React技术栈》</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PM2用法简介</title>
      <link href="/2018/02/20/pm2%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/02/20/pm2%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="PM2用法简介"><a href="#PM2用法简介" class="headerlink" title="PM2用法简介"></a>PM2用法简介</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>PM2是node进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。<a href="http://www.cnblogs.com/chyingp/p/pm2-documentation.html" target="_blank" rel="noopener">引用</a></p></blockquote><h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install pm2@latest -g</span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ul><li>最简单的启用一个应用:  <code>pm2 start app.js</code></li><li>停止：<code>pm2 stop app_name|app_id</code></li><li>删除：<code>pm2 delete app_name|app_id</code></li><li>重启：<code>pm2 restart app_name|app_id</code></li><li>停止所有：<code>pm2 stop all</code></li><li>查看所有的进程：<code>pm2 list</code></li><li>查看所有的进程状态：<code>pm2 status</code></li><li>查看某一个进程的信息：<code>pm2 describe app_name|app_id</code></li></ul><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul><li><code>--watch</code>:监听应用目录源码的变化，一旦发生变化，自动重启。如果要精确监听、不见听的目录，最好通过配置文件</li><li><code>-i --instances</code>:启用多少个实例，可用于负载均衡。如果-i 0或者-i max，则根据当前机器核数确定实例数目，可以弥补node.js缺陷</li><li><code>--ignore-watch</code>:排除监听的目录/文件，可以是特定的文件名，也可以是正则。比如 <code>--ignore-watch=&quot;test node_modules &quot;some scripts&quot;</code></li><li><code>-n --name</code>:应用的名称。查看应用信息的时候可以用到</li><li><code>-o --output &lt;path&gt;</code>:标准输出日志文件的路径，有默认路径</li><li><code>-e --error &lt;path&gt;</code>:错误输出日志文件的路径，有默认路径</li><li><code>--interpreter &lt;interpreter&gt;</code>：the interpreter pm2 should use for executing app (bash, python…)。比如你用的coffee script来编写应用</li></ul><p><strong>完整参数命令</strong>: <code>pm2 start index.js --watch -i 2</code></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul><li>配置文件里的设置项，跟命令行参数基本是一一对应的</li><li>配置文件的格式可以为json/yaml</li><li>json格式的配置文件，pm2当作普通的js文件来处理，所以可以在里面添加注释或者编写代码，这对于动态调整配置很有好处</li><li>如果启动的时候指定了配置文件，那么命令行参数会被忽略（个别参数除外，比如–env）</li></ul><p><strong>完整参数命令</strong>:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "name"             : "node-app", //启动app名称</span><br><span class="line">  "cwd"              : "/srv/node-app/current", </span><br><span class="line">  "args"             : ["--toto=heya coco", "-d", "1"],</span><br><span class="line">  "script"           : "bin/app.js",</span><br><span class="line">  "node_args"        : ["--harmony", " --max-stack-size=102400000"],</span><br><span class="line">  "log_date_format"  : "YYYY-MM-DD HH:mm Z",</span><br><span class="line">  "error_file"       : "/var/log/node-app/node-app.stderr.log",</span><br><span class="line">  "out_file"         : "log/node-app.stdout.log",</span><br><span class="line">  "pid_file"         : "pids/node-geo-api.pid",</span><br><span class="line">  "instances"        : 6, //or 0 =&gt; 'max'</span><br><span class="line">  "min_uptime"       : "200s", // 200 seconds, defaults to 1000</span><br><span class="line">  "max_restarts"     : 10, // defaults to 15</span><br><span class="line">  "max_memory_restart": "1M", // 1 megabytes, e.g.: "2G", "10M", "100K", 1024 the default unit is byte.</span><br><span class="line">  "cron_restart"     : "1 0 * * *",</span><br><span class="line">  "watch"            : false,</span><br><span class="line">  "ignore_watch"      : ["[\\/\\\\]\\./", "node_modules"],</span><br><span class="line">  "merge_logs"       : true,</span><br><span class="line">  "exec_interpreter" : "node",</span><br><span class="line">  "exec_mode"        : "fork",</span><br><span class="line">  "autorestart"      : false, // enable/disable automatic restart when an app crashes or exits</span><br><span class="line">  "vizion"           : false, // enable/disable vizion features (versioning control)</span><br><span class="line">  // Default environment variables that will be injected in any environment and at any start</span><br><span class="line">  "env": &#123;</span><br><span class="line">    "NODE_ENV": "production",</span><br><span class="line">    "AWESOME_SERVICE_API_TOKEN": "xxx"</span><br><span class="line">  &#125;</span><br><span class="line">  "env_*" : &#123;</span><br><span class="line">    "SPECIFIC_ENV" : true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>完整配置文件写法：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"apps"</span> : [&#123;</span><br><span class="line">    // Application #1</span><br><span class="line">    "name"        : "worker-app",</span><br><span class="line">    "script"      : "worker.js",</span><br><span class="line">    "args"        : ["--toto=heya coco", "-d", "1"],</span><br><span class="line">    "watch"       : true,</span><br><span class="line">    "node_args"   : "--harmony",</span><br><span class="line">    "merge_logs"  : true,</span><br><span class="line">    "cwd"         : "/this/is/a/path/to/start/script",</span><br><span class="line">    "env": &#123;</span><br><span class="line">      "NODE_ENV": "development",</span><br><span class="line">      "AWESOME_SERVICE_API_TOKEN": "xxx"</span><br><span class="line">    &#125;,</span><br><span class="line">    "env_production" : &#123;</span><br><span class="line">       "NODE_ENV": "production"</span><br><span class="line">    &#125;,</span><br><span class="line">    "env_staging" : &#123;</span><br><span class="line">       "NODE_ENV" : "staging",</span><br><span class="line">       "TEST"     : true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    // Application #2</span><br><span class="line">    "name"       : "api-app",</span><br><span class="line">    "script"     : "api.js",</span><br><span class="line">    "instances"  : 4,</span><br><span class="line">    "exec_mode"  : "cluster_mode",</span><br><span class="line">    "error_file" : "./examples/child-err.log",</span><br><span class="line">    "out_file"   : "./examples/child-out.log",</span><br><span class="line">    "pid_file"   : "./examples/child.pid"</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过yaml管理多个应用"><a href="#通过yaml管理多个应用" class="headerlink" title="通过yaml管理多个应用"></a>通过yaml管理多个应用</h3><p>process.yml:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apps:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">script</span>   <span class="string">:</span> <span class="string">app.js</span></span><br><span class="line"><span class="attr">    instances:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    exec_mode:</span> <span class="string">cluster</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">script</span> <span class="string">:</span> <span class="string">worker.js</span></span><br><span class="line">    <span class="string">watch</span>  <span class="string">:</span> <span class="literal">true</span></span><br><span class="line">    <span class="string">env</span>    <span class="string">:</span></span><br><span class="line"><span class="attr">      NODE_ENV:</span> <span class="string">development</span></span><br><span class="line"><span class="attr">    env_production:</span></span><br><span class="line"><span class="attr">      NODE_ENV:</span> <span class="string">production</span></span><br></pre></td></tr></table></figure><p>启动：<code>pm2 start process.yml</code></p><h3 id="环境切换"><a href="#环境切换" class="headerlink" title="环境切换"></a>环境切换</h3><p>正式开发中分为不同的环境(开发环境、测试环境、生产环境)，我们需要根据不同的情景来切换各种环境</p><p>pm2通过在配置文件中通过<code>env_xx</code>来声明不同环境的配置，然后在启动应用时，通过<code>--env</code>参数指定运行的环境</p><p>环境配置定义，在应用中，可以通过process.env.REMOTE_ADDR等来读取配置中生命的变量：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">"env": &#123;</span><br><span class="line">  "NODE_ENV": "production",</span><br><span class="line">  "REMOTE_ADDR": "http://www.example.com/"</span><br><span class="line">&#125;,</span><br><span class="line">"env_dev": &#123;</span><br><span class="line">  "NODE_ENV": "development",</span><br><span class="line">  "REMOTE_ADDR": "http://wdev.example.com/"</span><br><span class="line">&#125;,</span><br><span class="line">"env_test": &#123;</span><br><span class="line">  "NODE_ENV": "test",</span><br><span class="line">  "REMOTE_ADDR": "http://wtest.example.com/"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动指定的环境：<code>pm2 start app.js --env development</code></p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js -i 3 <span class="comment"># 开启三个进程</span></span><br><span class="line">pm2 start app.js -i max <span class="comment"># 根据机器CPU核数，开启对应数目的进程</span></span><br></pre></td></tr></table></figure><h3 id="开机自动启动"><a href="#开机自动启动" class="headerlink" title="开机自动启动"></a>开机自动启动</h3><ol><li>通过pm2 save保存当前进程状态。</li><li>通过pm2 startup [platform]生成开机自启动的命令。例如：<code>pm2 startup centeros</code></li><li>将步骤2生成的命令，粘贴到控制台进行，搞定。</li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>官方文档1：<a href="http://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/" target="_blank" rel="noopener">http://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/</a></li><li>官方文档2：<a href="http://pm2.keymetrics.io/docs/usage/quick-start/" target="_blank" rel="noopener">http://pm2.keymetrics.io/docs/usage/quick-start/</a></li><li>PM2实用入门指南：<a href="http://www.cnblogs.com/chyingp/p/pm2-documentation.html" target="_blank" rel="noopener">http://www.cnblogs.com/chyingp/p/pm2-documentation.html</a></li><li>nodejs高大上的部署方式-PM2: <a href="http://www.2cto.com/kf/201501/367718.html" target="_blank" rel="noopener">http://www.2cto.com/kf/201501/367718.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化(Css动画篇)</title>
      <link href="/2017/07/31/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88css%E5%8A%A8%E7%94%BB%E7%AF%87%EF%BC%89/"/>
      <url>/2017/07/31/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88css%E5%8A%A8%E7%94%BB%E7%AF%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>现代浏览器在使用CSS3动画时，以下四种情形绘制的效率较高，分别是：</p><ul><li>改变位置</li><li>改变大小</li><li>旋转</li><li>改变透明度</li></ul><h3 id="层？重绘？回流和重布局？图层重组？"><a href="#层？重绘？回流和重布局？图层重组？" class="headerlink" title="层？重绘？回流和重布局？图层重组？"></a>层？重绘？回流和重布局？图层重组？</h3><p><em>首先要了解CSS的图层的概念（Chrome浏览器）</em></p><p>浏览器在渲染一个页面时，会将页面分为很多个图层，图层有大有小，每个图层上有一个或多个节点。在渲染DOM的时候，浏览器所做的工作实际上是：</p><blockquote><ol><li>获取DOM后分割为多个图层</li><li>对每个图层的节点计算样式结果（Recalculate style–样式重计算）</li><li>为每个节点生成图形和位置（Layout–回流和重布局）</li><li>将每个节点绘制填充到图层位图中（Paint Setup和Paint–重绘）</li><li>图层作为纹理上传至GPU</li><li>符合多个图层到页面上生成最终屏幕图像（Composite Layers–图层重组）</li></ol></blockquote><p>Chrome中满足以下任意情况就会创建图层：</p><blockquote><ul><li>3D或透视变换（perspective transform）CSS属性</li><li>使用加速视频解码的<code>&lt;video&gt;</code>节点</li><li>拥有3D（WebGL）上下文或加速的2D上下文的<code>&lt;canvas</code>&gt;节点</li><li>混合插件（如Flash）</li><li>对自己的<code>opacity</code>做CSS动画或使用一个动画<code>webkit</code>变换的元素</li><li>拥有加速CSS过滤器的元素</li><li>元素有一个包含复合层的后代节点（一个元素拥有一个子元素，该子元素在自己的层里）</li><li>元素有一个<code>z-index</code>较低且包含一个复合层的兄弟元素（换句话说就是该元素在复合层上面渲染）</li></ul></blockquote><p><strong>需要注意的是，如果图层中某个元素需要重绘，那么整个图层都需要重绘。比如一个图层包含很多节点，其中有个gif图，gif图的每一帧，都会重回整个图层的其他节点，然后生成最终的图层位图。所以这需要通过特殊的方式来强制gif图属于自己一个图层（<code>translateZ(0)</code>或者<code>translate3d(0,0,0)</code>），CSS3的动画也是一样（好在绝大部分情况浏览器自己会为CSS3动画的节点创建图层）</strong></p><h3 id="层和CSS动画"><a href="#层和CSS动画" class="headerlink" title="层和CSS动画"></a>层和CSS动画</h3><p>简化一下上述过程，每一帧动画浏览器可能需要做如下工作：</p><blockquote><ol><li>计算需要被加载到节点上的样式结果（Recalculate style–样式重计算）</li><li>为每个节点生成图形和位置（Layout–回流和重布局）</li><li>将每个节点填充到图层中（Paint Setup和Paint–重绘）</li><li>组合图层到页面上（Composite Layers–图层重组）</li></ol></blockquote><p>如果我们需要使得动画的性能提高，需要做的就是减少浏览器在动画运行时所需要做的工作。最好的情况是，改变的属性仅仅印象图层的组合，变换（<code>transform</code>）和透明度（<code>opacity</code>）就属于这种情况。</p><p>现代浏览器如Chrome，Firefox，Safari和Opera都对变换和透明度采用硬件加速，但IE10+不是很确定是否硬件加速</p><h2 id="触发重布局的属性"><a href="#触发重布局的属性" class="headerlink" title="触发重布局的属性"></a>触发重布局的属性</h2><p><em>有些节点，当你改变他时，会需要重新布局（这也意味着需要重新计算其他被影响的节点的位置和大小）。这种情况下，被影响的DOM树越大（可见节点），重绘所需要的时间就会越长，而渲染一帧动画的时间也相应变长。所以需要尽力避免这些属性</em></p><p>一些常用的改变时会触发重布局的属性：<br>盒子模型相关属性会触发重布局：</p><blockquote><ul><li>width</li><li>height</li><li>padding</li><li>margin</li><li>display</li><li>border-width</li><li>border</li><li>min-height</li></ul></blockquote><p>定位属性及浮动也会触发重布局：</p><blockquote><ul><li>top</li><li>bottom</li><li>left</li><li>right</li><li>position</li><li>float</li><li>clear</li></ul></blockquote><p>改变节点内部文字结构也会触发重布局：</p><blockquote><ul><li>text-align</li><li>overflow-y</li><li>font-weight</li><li>overflow</li><li>font-family</li><li>line-height</li><li>vertival-align</li><li>white-space</li><li>font-size</li></ul></blockquote><p><strong>这么多常用属性都会触发重布局，可以看到，他们的特点就是可能修改整个节点的大小或位置，所以会触发重布局。</strong></p><h3 id="别使用CSS类名做状态标记"><a href="#别使用CSS类名做状态标记" class="headerlink" title="别使用CSS类名做状态标记"></a>别使用CSS类名做状态标记</h3><p>如果在网页中使用CSS的类来对节点做状态标记，当这些节点的状态标记类修改时，将会触发节点的重绘和重布局。所以在节点上使用CSS类来做状态比较是代价很昂贵的</p><h2 id="触发重绘的属性"><a href="#触发重绘的属性" class="headerlink" title="触发重绘的属性"></a>触发重绘的属性</h2><p>修改时只触发重绘的属性有：</p><blockquote><ul><li>color</li><li>border-style</li><li>border-radius</li><li>visibility</li><li>text-decoration</li><li>background</li><li>background-image</li><li>background-position</li><li>background-repeat</li><li>background-size</li><li>outline-color</li><li>outline</li><li>outline-style</li><li>outline-width</li><li>box-shadow</li></ul></blockquote><p> 这样可以看到，这些属性都不会修改节点的大小和位置，自然不会触发重布局，但是节点内部的渲染效果进行了改变，所以只需要重绘就可以了。</p><h3 id="手机就算重绘也很慢"><a href="#手机就算重绘也很慢" class="headerlink" title="手机就算重绘也很慢"></a>手机就算重绘也很慢</h3><p>在重绘时，这些节点会被加载到GPU中进行重绘，这对移动设备如手机的影响还是很大的。因为CPU不如台式机或笔记本电脑，所以绘画巫妖的时间更长。而且CPU与GPU之间的有较大的带宽限制，所以纹理的上传需要一定时间。</p><h2 id="触发图层重组的属性"><a href="#触发图层重组的属性" class="headerlink" title="触发图层重组的属性"></a>触发图层重组的属性</h2><h3 id="透明度竟然不会触发重绘？"><a href="#透明度竟然不会触发重绘？" class="headerlink" title="透明度竟然不会触发重绘？"></a>透明度竟然不会触发重绘？</h3><p>需要注意的是，上面那些触发重绘的属性里面没有<code>opacity</code>（透明度），很奇怪不是吗？实际上透明度的改变后，GPU在绘画时只是简单的降低之前已经画好的纹理的alpha值来达到效果，并不需要整体的重绘。不过这个前提是这个被修改<code>opacit</code>y本身必须是一个图层，如果图层下还有其他节点，GPU也会将他们透明化。</p><h3 id="强迫浏览器创建图层"><a href="#强迫浏览器创建图层" class="headerlink" title="强迫浏览器创建图层"></a>强迫浏览器创建图层</h3><p>在Blink和WebKit的浏览器中，一当一个节点被设定了透明度的相关过渡效果或动画时，浏览器会将其作为一个单独的图层，但很多开发者使用<code>translateZ(0)</code>或者<code>translate3d(0,0,0)</code>去使浏览器创建图层。这种方式可以消除在动画开始之前的图层创建时间，使得动画尽快开始（创建图层和绘制图层还是比较慢的），而且不会随着抗锯齿而导出突变。不过这种方法需要节制，否则会因为创建过多的图层导致崩溃。</p><h3 id="Chrome中的抗锯齿"><a href="#Chrome中的抗锯齿" class="headerlink" title="Chrome中的抗锯齿"></a>Chrome中的抗锯齿</h3><p>Chrome中，非根图层以及透明图层使用grayscale antialiasing而不是subpixel antialiasing，如果抗锯齿方法变化，这个效果将会非常显著。如果你打算预处理一个节点而不打算等到动画开始，可以通过这种强迫浏览器创建图层的方式进行</p><h3 id="transform变换是你的选择"><a href="#transform变换是你的选择" class="headerlink" title="transform变换是你的选择"></a>transform变换是你的选择</h3><p>我们通过节点的<code>transform</code>可以修改节点的位置、旋转、大小等。我们平常会使用<code>left</code>和<code>top</code>属性来修改节点的位置，但正如上面所述，<code>left</code>和<code>top</code>会触发重布局，修改时的代价相当大。取而代之的更好方法是使用<code>translate</code>，这个不会触发重布局。</p><h2 id="JS动画和CSS3动画的比较"><a href="#JS动画和CSS3动画的比较" class="headerlink" title="JS动画和CSS3动画的比较"></a>JS动画和CSS3动画的比较</h2><p>我们经常面临一个抉择：是使用JavaScript的动画还是使用CSS的动画，下面将对比一下这两种方式。</p><h3 id="JS动画"><a href="#JS动画" class="headerlink" title="JS动画"></a>JS动画</h3><p><strong>缺点</strong>：JavaScript在浏览器的主线程中运行，而其中还有很多其他需要运行的JavaScript、样式计算、布局、绘制等对其干扰。这也就导致了线程可能出现阻塞，从而造成丢帧的情况。</p><p><strong>优点</strong>：JavaScript的动画与CSS预先定义好的动画不同，可以在其动画过程中对其进行控制：开始、暂停、回放、中止、取消都是可以做到的。而且一些动画效果，比如视差滚动效果，只有JavaScript能够完成。</p><h3 id="前瞻"><a href="#前瞻" class="headerlink" title="前瞻"></a>前瞻</h3><p>Google目前正在探究通过JS的多线程（Web Workers）来提供更好的动画效果，而不会触发重布局及样式重计算。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>动画给予了页面丰富的视觉体验。我们应该尽力避免使用会触发重布局和重绘的属性，以免失帧。最好提前申明动画，这样能让浏览器提前对动画进行优化。由于GPU的参与，现在用来做动画的最好属性是如下几个：</p><blockquote><ul><li>opacity</li><li>translate</li><li>rotate</li><li>scale</li></ul></blockquote><p>也许会有一些新的方式使得可以使用JavaScript做出更好的没有限制的动画，而且不用担心主线程的阻塞问题。但在那之前，还是好好考虑下如何做出流畅的动画吧。</p>]]></content>
      
      
      <categories>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECMAScript 6</title>
      <link href="/2017/06/11/ES6part/"/>
      <url>/2017/06/11/ES6part/</url>
      
        <content type="html"><![CDATA[<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ul><li>集合的基本概念：集合是由一组无序且唯一（即不能重复）的项组成的。这个数据结构使用了与有限集合相同的数学概念，应用在计算机的数据结构中。</li><li>特点：key 和 value相同，没有重复的value</li><li>ES6提供了数据结构Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</li></ul><h3 id="1-创建一个Set"><a href="#1-创建一个Set" class="headerlink" title="1. 创建一个Set"></a>1. 创建一个Set</h3><pre><code>const s = new Set([1,2,3,3,{a:1}]);console.log(s);</code></pre><h3 id="2-Set类的属性"><a href="#2-Set类的属性" class="headerlink" title="2. Set类的属性"></a>2. Set类的属性</h3><pre><code>console.log(s.size) //4</code></pre><h3 id="3-Set类的方法"><a href="#3-Set类的方法" class="headerlink" title="3. Set类的方法"></a>3. Set类的方法</h3><pre><code>const s = new Set([1,2,3]);</code></pre><h5 id="1-添加一个数据"><a href="#1-添加一个数据" class="headerlink" title="1.添加一个数据"></a>1.添加一个数据</h5><p><strong>添加一个数据，返回Set结构本身</strong></p><pre><code>s.add(&apos;a&apos;).add(&apos;b&apos;).add(&apos;c&apos;);</code></pre><h5 id="2-删除一个数据"><a href="#2-删除一个数据" class="headerlink" title="2.删除一个数据"></a>2.删除一个数据</h5><p><strong>删除一个数据，返回一个布尔值，表示删除是否成功</strong></p><pre><code>console.log(s.delete(&apos;a&apos;));//trueconsole.log(s);//Set(5) {1, 2, 3, &quot;b&quot;, &quot;c&quot;}console.log(s.delete(&apos;a&apos;));//false</code></pre><h5 id="3-是否有一个数据"><a href="#3-是否有一个数据" class="headerlink" title="3.是否有一个数据"></a>3.是否有一个数据</h5><p><strong>判断该值是否是Set的成员，返回一个布尔值</strong></p><pre><code>console.log(s.has(&apos;a&apos;));//falseconsole.log(s.has(1));//true</code></pre><h5 id="4-清楚所有数据，没有返回值"><a href="#4-清楚所有数据，没有返回值" class="headerlink" title="4.清楚所有数据，没有返回值"></a>4.清楚所有数据，没有返回值</h5><pre><code>s.clear();console.log(s);//Set(0) {}</code></pre><h3 id="4-数组去重"><a href="#4-数组去重" class="headerlink" title="4.数组去重"></a>4.数组去重</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,[],[],<span class="literal">true</span>,<span class="literal">NaN</span>,<span class="literal">NaN</span>,<span class="literal">false</span>,<span class="literal">true</span>,&#123;a:<span class="number">1</span>&#125;];</span><br><span class="line"></span><br><span class="line">console.log([...new <span class="built_in">Set</span>(arr)]);</span><br><span class="line">//[<span class="number">1</span>, <span class="number">2</span>, <span class="built_in">Array</span>(<span class="number">0</span>), <span class="built_in">Array</span>(<span class="number">0</span>), <span class="literal">true</span>, <span class="literal">NaN</span>, <span class="literal">false</span>, Object]</span><br></pre></td></tr></table></figure><h3 id="5-返回键名的遍历器keys"><a href="#5-返回键名的遍历器keys" class="headerlink" title="5.返回键名的遍历器keys()"></a>5.返回键名的遍历器keys()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> k = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(k.keys());</span><br><span class="line"><span class="comment">//SetIterator &#123;1, 2, 3&#125;</span></span><br></pre></td></tr></table></figure><h3 id="6-返回键值的遍历器values"><a href="#6-返回键值的遍历器values" class="headerlink" title="6.返回键值的遍历器values()"></a>6.返回键值的遍历器values()</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(k.values());</span><br><span class="line"><span class="comment">//SetIterator &#123;1, 2, 3&#125;</span></span><br></pre></td></tr></table></figure><h3 id="7-返回键值对的遍历器entries"><a href="#7-返回键值对的遍历器entries" class="headerlink" title="7.返回键值对的遍历器entries()"></a>7.返回键值对的遍历器entries()</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(k.entries());</span><br><span class="line"><span class="comment">//SetIterator &#123;1, 2, 3&#125;</span></span><br></pre></td></tr></table></figure><h3 id="8-使用回掉函数遍历每个成员"><a href="#8-使用回掉函数遍历每个成员" class="headerlink" title="8.使用回掉函数遍历每个成员"></a>8.使用回掉函数遍历每个成员</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">k.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value,key,set</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">'ES6'</span>);</span><br><span class="line">  <span class="comment">//1ES6  2ES6  3ES6</span></span><br><span class="line"> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="9-注意事项"><a href="#9-注意事项" class="headerlink" title="9.注意事项"></a>9.注意事项</h3><ol><li>key 和 vaule是相同的</li><li>NaN 和 NaN 认为是相同的</li><li>{ } 和 { } 是不同的</li></ol><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><ul><li>字典：是用来存储不重复的key的Hash结构。不同于集合（Set）的是，字典使用的是[键，值]的形式来存储数据的。</li><li>JavaScript的对象（Object：{ }）只能用字符串当作键，这给它的使用带来了很大的限制。</li><li>为了解决这个问题，ES6提供了Map数据结构。它类似于对象，也是键值对的集合，但是”键”的范围不限于字符串，各种类型的值（包括对象）都可以当做键，也就是说，Object结构提供了”字符串-值”的对应，Map结构提供了”值-值”的对应，是一种更完善的Hash结构的实现。如果你需要”键值对”的数据结构，Map比Object更合适。</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data1 = &#123;a:1&#125;,data2 = &#123;b:2&#125;,obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">obj[data1] = 1;</span><br><span class="line">obj[data2] = 2;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(obj);<span class="comment">// &#123;[object Object]: 2&#125;</span></span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(data1.<span class="keyword">toString</span>()===data2.<span class="keyword">toString</span>());</span><br><span class="line"><span class="comment">//true;</span></span><br></pre></td></tr></table></figure><h3 id="创建一个Map"><a href="#创建一个Map" class="headerlink" title="创建一个Map"></a>创建一个Map</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">map</span> = <span class="keyword">new</span> Map([</span><br><span class="line"> [<span class="string">'a'</span>,<span class="number">1</span>],</span><br><span class="line"> [<span class="string">'b'</span>,<span class="number">2</span>]</span><br><span class="line">]);</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">map</span>);</span><br><span class="line"><span class="comment">//&#123;"a" =&gt; 1, "b" =&gt; 2&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Map类的属性"><a href="#Map类的属性" class="headerlink" title="Map类的属性"></a>Map类的属性</h3><pre><code>console.log(map.size)</code></pre><h3 id="Map类的方法"><a href="#Map类的方法" class="headerlink" title="Map类的方法"></a>Map类的方法</h3><pre><code>***1.set(key,value)设置键名key对应的键值为value，然后返回整个Map结构。如果key已经有值，则键值会被更新，否则就新生成该键。***<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map.set(<span class="string">'miaov'</span>.<span class="string">'ketang'</span>).<span class="built_in">set</span>(<span class="string">'new'</span>,<span class="string">'fq'</span>).<span class="built_in">set</span>(<span class="string">'miaov'</span>,<span class="string">'leo'</span>);</span><br><span class="line"></span><br><span class="line">console.log(map);</span><br><span class="line">//Map(4) &#123;<span class="string">"a"</span> =&gt; 1, <span class="string">"b"</span> =&gt; 2, <span class="string">"miaov"</span> =&gt; <span class="string">"leo"</span>, <span class="string">"new"</span> =&gt; <span class="string">"fq"</span>&#125;</span><br></pre></td></tr></table></figure>***2.get(key)get方法读取key对应的键值，如果找不到key，返回undefined***<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">'new'</span>));</span><br><span class="line"><span class="comment">//'fq'</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">'x'</span>));</span><br><span class="line"><span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>***3.delete(key)删除某个键，返回true，如果删除失败，返回false***<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(<span class="built_in">map</span>.<span class="keyword">delete</span>(<span class="string">'a'</span>));</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">map</span>.<span class="keyword">delete</span>(<span class="string">'a'</span>));</span><br><span class="line"><span class="comment">//false</span></span><br></pre></td></tr></table></figure>***4.has(key)某个键是否在Map对象中，如果是返回true，如果没有返回false***<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="keyword">log</span>(<span class="built_in">map</span>.has(<span class="string">'a'</span>));</span><br><span class="line"><span class="comment">//false</span></span><br><span class="line">console.<span class="keyword">log</span>(<span class="built_in">map</span>.has(<span class="string">'miaov'</span>));</span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure> ***5.clear()清除所有数据，没有返回值*** ***6.keys()返回键名的遍历器*** ***7.value()返回键值的遍历器*** ***8.entries()返回键值对的遍历器*** ***9.forEach()使用回调函数遍历每个成员***</code></pre><h3 id="Map在使用中的注意事项："><a href="#Map在使用中的注意事项：" class="headerlink" title="Map在使用中的注意事项："></a>Map在使用中的注意事项：</h3><pre><code>1.NaN 是相同的2.{ }是不同的3.特殊性质：数据是按照添加的顺序排列的<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> s = <span class="literal">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  s.<span class="built_in">set</span>(<span class="number">2</span>,<span class="number">2</span>).<span class="built_in">set</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// &#123;2 =&gt; 2, 1 =&gt; 1&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="函数的默认参数"><a href="#函数的默认参数" class="headerlink" title="函数的默认参数"></a>函数的默认参数</h2><p> ES6允许给函数制定默认参数</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">(a,b)</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  a = a || 1;</span></span></span><br><span class="line"><span class="function"><span class="comment">  b = b || 2;</span></span></span><br><span class="line"><span class="function"><span class="comment">  </span></span></span><br><span class="line"><span class="function"><span class="comment">  console.log(a+b);</span></span></span><br><span class="line"><span class="function"><span class="comment">  &#125;</span></span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function">  <span class="title">fn</span><span class="params">()</span>;</span> <span class="comment">//3</span></span><br><span class="line">  fn(<span class="number">0</span>,<span class="number">1</span>);  <span class="comment">//2//出现问题</span></span><br></pre></td></tr></table></figure><p> 添加默认参数</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span><span class="params">(a = 1,b =2)</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  console.log(a+b);</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">fn2</span><span class="params">()</span>;</span> <span class="comment">//3</span></span><br><span class="line">fn2(<span class="number">0</span>,<span class="number">1</span>);  <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p> 同样支持解构</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span><span class="params">(<span class="comment">&#123;a,b&#125;</span>=<span class="comment">&#123;a:1,b:2&#125;</span>)</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  console.log(a+b);</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">fn3</span><span class="params">()</span>;</span>  <span class="comment">//3</span></span><br><span class="line">fn3(<span class="comment">&#123;&#125;</span>);  <span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn4</span><span class="params">(<span class="comment">&#123;a=1,b=2&#125;</span>=<span class="comment">&#123;&#125;</span>)</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">   console.log(a+b);</span></span></span><br><span class="line"><span class="function"><span class="comment"> &#125;</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"> <span class="title">fn4</span><span class="params">()</span>;</span>  <span class="comment">//3</span></span><br><span class="line"> fn4(<span class="comment">&#123;&#125;</span>);  <span class="comment">//3</span></span><br><span class="line"> fn4(<span class="comment">&#123;a:4&#125;</span>);  <span class="comment">//6</span></span><br></pre></td></tr></table></figure><h2 id="函数的rest参数"><a href="#函数的rest参数" class="headerlink" title="函数的rest参数"></a>函数的rest参数</h2><p> es6中新增了rest参数，用来取代argumets，在est中废除了arguments  caller callee</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// callee用法</span></span><br><span class="line">(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n);</span><br><span class="line">    <span class="keyword">if</span>(n===<span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">return</span> n*<span class="built_in">arguments</span>.callee(n<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">)(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// caller用法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我6666666！'</span>);</span><br><span class="line">  setInterval(f1.caller,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'6不6？'</span>);</span><br><span class="line">  f1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f2();</span><br></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(<span class="rest_arg">...res</span>)</span></span>&#123;</span><br><span class="line"> console.log(res);</span><br><span class="line">  let ret = res.reduce(<span class="function"><span class="keyword">function</span> <span class="params">(a,b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">  &#125;);</span><br><span class="line">  console.log(ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);  <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p> rest 参数 必须是最后一个参数</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">(a=1,b=2,<span class="rest_arg">...res</span>)</span></span>&#123;</span><br><span class="line">   console.log(a);</span><br><span class="line">   console.log(b);</span><br><span class="line">   console.log(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(); <span class="comment">// 1 2 []</span></span><br></pre></td></tr></table></figure><h2 id="胖子函数"><a href="#胖子函数" class="headerlink" title="胖子函数"></a>胖子函数</h2><p><strong><em>胖子函数又叫箭头函数，通常用在函数表达式内和回调函数当中</em></strong></p><ol><li>没有自己的this</li><li>没有arguments</li><li>不能当做构造函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a+b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b;</span><br><span class="line"><span class="comment">//相当于 return a+b</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>));  <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sortArr = <span class="function"><span class="params">arr</span> =&gt;</span> arr.sort();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sortArr([<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]));</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params">a = <span class="number">1</span>, b = <span class="number">2</span></span>) =&gt;</span> &#123;  <span class="comment">//当有函数体的时候必须有 return</span></span><br><span class="line">  <span class="built_in">console</span>.log(a + b); <span class="comment">//3</span></span><br><span class="line">  <span class="keyword">return</span> c = a + b + <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line">fn(); <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js正则表达式</title>
      <link href="/2017/06/11/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2017/06/11/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h2><h3 id="创建正则表达式："><a href="#创建正则表达式：" class="headerlink" title="创建正则表达式："></a>创建正则表达式：</h3><ul><li>实例化的方式：new RegExp(‘a’ , ‘gim’)</li><li><p>字面量的方式：/abc/gim</p><p> <em>g : 全局匹配</em><br> <em>i : 忽略大小写</em><br> <em>m : 多行模式匹配</em></p></li></ul><hr><h2 id="test"><a href="#test" class="headerlink" title="test()"></a>test()</h2><ul><li>正则表达式的常用方法之一：test用来测试匹配的字符串是否符合规则；</li><li>如果匹配成功就返回一个true，否则就返回一个false。</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var re<span class="name">g1</span> = /a/;</span><br><span class="line">var re<span class="name">g2</span> = /a<span class="number">45</span>/;</span><br><span class="line">var re<span class="name">g3</span> = /B/;</span><br><span class="line">var re<span class="name">g4</span> = /B/i;</span><br><span class="line"></span><br><span class="line">var str = <span class="string">'123a45a6Abss'</span>;</span><br><span class="line"></span><br><span class="line">re<span class="name">g1.</span>test<span class="comment">(str)</span>; <span class="comment">//true</span></span><br><span class="line">re<span class="name">g2.</span>test<span class="comment">(str)</span>;  <span class="comment">//true</span></span><br><span class="line">re<span class="name">g3.</span>test<span class="comment">(str)</span>;  <span class="comment">//false</span></span><br><span class="line">re<span class="name">g4.</span>test<span class="comment">(str)</span>;  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><hr><h2 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h2><ul><li>字符串的重要方法之一：<code>str.replace(reg,newStr)</code>，用来替换字符串中的某些复合规则的字符。</li><li>返回值：是一个新的字符串。<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abse99dl'</span>.replace(<span class="string">'ab'</span>,<span class="string">'ff'</span>) <span class="regexp">//</span><span class="string">'ffse99dl'</span></span><br><span class="line"><span class="string">'a1a2a3a4a5'</span>.replace(<span class="regexp">/a/g</span> , <span class="string">'b'</span>)  <span class="regexp">//</span><span class="string">'b1b2b3b4b5'</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h2><ul><li>str.match(reg)用来匹配符合规则的字符，返回一个数组。</li><li>返回只是一个数组。当不是去哪局匹配的时候，数组里面有一个index代表匹配成功的位置，还有一个input代表匹配的原字符串。如果是全局匹配的时候，那么就直接返回所有匹配字符串组成的数组，如果匹配不成功，返回一个null。</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">str</span> = <span class="string">'a1a2a3a4a5'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>.<span class="built_in">match</span>(/a/);</span><br><span class="line"><span class="comment">//["a",index:0,input:'a1a2a3a4a5']</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>.<span class="built_in">match</span>(/a/g);</span><br><span class="line"><span class="comment">//['a','a','a','a','a']</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式元字符"><a href="#正则表达式元字符" class="headerlink" title="正则表达式元字符"></a>正则表达式元字符</h2><p>正则表达式中有特殊含义的非字母字符</p><blockquote><p>. * + ? ^ $ | \ () [] {}</p></blockquote><hr><h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><ul><li>可以使用元字符[ ]构建一个简单的类</li><li>类 ： 指符合某些特性的对象，一个泛指，而不是指某个字符。</li><li>例如: [abc]指的是匹配a或b或c，[^abc]除了abc以外的字符。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'a4b9b8c9d3e6'</span>;</span><br><span class="line">str.replace(<span class="regexp">/[abcde]/g</span> ,<span class="string">'Q'</span>);</span><br><span class="line"><span class="regexp">//</span><span class="string">"Q4Q9Q8Q9Q3Q6"</span></span><br><span class="line"></span><br><span class="line">var str = <span class="string">'a1b2c3^#()*d4e0'</span>;</span><br><span class="line">str.replace(<span class="regexp">/[^abcde]/g</span> ,<span class="string">'Q'</span>);</span><br><span class="line"><span class="regexp">//</span><span class="string">"aQbQcQQQQQQdQeQ"</span></span><br></pre></td></tr></table></figure><hr><h2 id="范围类"><a href="#范围类" class="headerlink" title="范围类"></a>范围类</h2><ul><li>[a-b]</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var str1 = <span class="string">'a1ds23mds45msaghjm6789m2347mgffgdg'</span>;</span><br><span class="line">str1.replace(<span class="regexp">/[a-z]/g</span> ,<span class="string">'+'</span>);</span><br><span class="line"><span class="regexp">//</span><span class="string">"+1++23+++45+++++++6789+2347+++++++"</span></span><br><span class="line"></span><br><span class="line">var str2 = <span class="string">'asd673%AD-F34L-J977_sdsa-d_&amp;%113'</span>;</span><br><span class="line">str2.replace(<span class="regexp">/[a-zA-Z0-9_-]/g</span> , <span class="string">'='</span>);</span><br><span class="line"><span class="regexp">//</span><span class="string">"======%====================&amp;%==="</span></span><br></pre></td></tr></table></figure><hr><h2 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h2><ul><li><code>.</code> 匹配除了新行符或者换行符的任意字符<br> \n 换行符<br> \r 回车符<br> \t 横向制表符</li><li><p><code>\s</code> 匹配的是空白字符，包括上面的换行符、制表符等。</p><p> ‘r2\n d2 a1’.match(/\s/g);<br> //[“↵”, “ “, “ “]</p></li><li><p><code>\S</code> 匹配除了空白字符的所有内容，相当于[^\s]</p></li><li><code>\w</code> 匹配所有的数字字母下划线，相当于[A-Za-z0-9_]</li><li><code>\W</code> 与<code>\w</code> 相反</li><li><code>\d</code> 匹配所有的数字，相当于[0-9]</li><li><code>\D</code> 与<code>\d</code> 相反，相当于[^0-9]或[^\d]</li></ul><hr><h2 id="边界类"><a href="#边界类" class="headerlink" title="边界类"></a>边界类</h2><ul><li><code>^</code> 以…为开头</li><li><code>$</code> 以…作为结尾</li><li><code>\b</code> 单词边界</li><li><code>\B</code> 非单词边界</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">'this is a issue good boy'</span>;</span><br><span class="line">str1.replace(<span class="regexp">/\bis\b/g</span> ,<span class="string">'IS'</span>);</span><br><span class="line"><span class="comment">//'this IS a issue good boy'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">'@111\n@222\n@333'</span>;</span><br><span class="line">str2.replace(<span class="regexp">/^@\d/gm</span> ,<span class="string">'Q'</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">"Q11</span></span><br><span class="line"><span class="comment"> Q22</span></span><br><span class="line"><span class="comment"> Q33"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"> <span class="string">'R2-D2 123'</span>.replace(<span class="regexp">/[RD]\d\B/g</span> ,<span class="string">'Q'</span>);</span><br><span class="line"> <span class="comment">//R2-D2 123</span></span><br><span class="line"> </span><br><span class="line"> <span class="string">'R2D2 123'</span>.replace(<span class="regexp">/[RD]\d\B/g</span> ,<span class="string">'Q'</span>);</span><br><span class="line"> <span class="comment">//"QD2 123"</span></span><br></pre></td></tr></table></figure><hr><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><ul><li><code>*</code> 表示匹配出现0次或者多次的内容；</li><li><code>?</code> 匹配0次或者1次</li><li><code>+</code> 匹配至少出现1次的内容</li><li><code>{n}</code> 匹配中间出现n词的内容</li><li><code>{min,}</code> 匹配至少min 次的内容</li><li><code>{min,max}</code> 匹配 min 到max 次的内容</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'a111b000000cde'</span>.replace(<span class="regexp">/\d&#123;3&#125;/g</span> ,<span class="string">'-'</span>);</span><br><span class="line"><span class="regexp">//</span><span class="string">"a-b--cde"</span></span><br><span class="line"></span><br><span class="line"><span class="string">'a111b000000cde'</span>.replace(<span class="regexp">/\d&#123;4,&#125;/g</span> ,<span class="string">'-'</span>);</span><br><span class="line"><span class="regexp">//</span><span class="string">"a111b-cde"</span></span><br></pre></td></tr></table></figure><hr><h2 id="贪婪模式与非贪婪模式"><a href="#贪婪模式与非贪婪模式" class="headerlink" title="贪婪模式与非贪婪模式"></a>贪婪模式与非贪婪模式</h2><ul><li>正则表达式分为：贪婪模式和非贪婪模式，默认是贪婪模式</li><li>贪婪模式：尽可能多的去匹配</li><li>非贪婪模式：尽可能少的去匹配</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'a12345678b'</span>;</span><br><span class="line">str.replace(<span class="regexp">/\d&#123;2,4&#125;/g</span>, <span class="string">'Q'</span>);</span><br><span class="line"><span class="regexp">//</span><span class="string">'aQQb'</span></span><br><span class="line"></span><br><span class="line">str.replace(<span class="regexp">/\d&#123;2,4&#125;?/g</span> ,<span class="string">'Q'</span>);</span><br><span class="line"><span class="regexp">//</span><span class="string">"aQQQQb"</span></span><br></pre></td></tr></table></figure><hr><h2 id="匹配中文"><a href="#匹配中文" class="headerlink" title="匹配中文"></a>匹配中文</h2><ul><li>[\u4e00-\u9fa5]</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">str</span> = <span class="string">'特t别b注z意y'</span>;</span><br><span class="line"><span class="built_in">str</span>.<span class="built_in">match</span>(/[\u4e00-\u9fa5]/g).<span class="built_in">join</span>(<span class="string">''</span>);</span><br><span class="line"><span class="comment">//"特别注意"</span></span><br></pre></td></tr></table></figure><hr><h2 id="子项"><a href="#子项" class="headerlink" title="子项"></a>子项</h2><ul><li>用小括号抱起来的部分称为子项</li><li>忽略分组</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abcabcabc123abc'</span>.match<span class="comment">(/(abc)</span>&#123;<span class="number">3</span>&#125;/g);  </span><br><span class="line"><span class="comment">// ["abcabcabc"]</span></span><br><span class="line"></span><br><span class="line"><span class="string">'2017-06-02'</span>.replace<span class="comment">(/(\d&#123;4&#125;)</span>-<span class="comment">(\d&#123;2&#125;)</span>-<span class="comment">(\d&#123;2&#125;)</span>/,<span class="string">'$2/$3/$1'</span>);</span><br><span class="line"><span class="comment">//"06/02/2017"</span></span><br><span class="line"></span><br><span class="line"><span class="string">'2017-06-02'</span>.replace<span class="comment">(/(?:\d&#123;4&#125;)</span>-<span class="comment">(\d&#123;2&#125;)</span>-<span class="comment">(\d&#123;2&#125;)</span>/,<span class="string">'$1/$2'</span>);</span><br><span class="line"><span class="comment">//"06/02"</span></span><br></pre></td></tr></table></figure><hr><h2 id="或"><a href="#或" class="headerlink" title="或"></a>或</h2><ul><li><code>|</code> 是或的意思</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'brinarybrincry'</span>.match(<span class="regexp">/brin(a|c)ry/g</span>);</span><br><span class="line"><span class="regexp">//</span>[<span class="string">"brinary"</span>, <span class="string">"brincry"</span>]</span><br></pre></td></tr></table></figure><hr><h2 id="重复子项"><a href="#重复子项" class="headerlink" title="重复子项"></a>重复子项</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'aaaaacccc11%%%%111ssssffffff'</span>.match(<span class="regexp">/(.)\1+/g</span>);</span><br><span class="line"><span class="regexp">//</span> [<span class="string">"aaaaa"</span>, <span class="string">"cccc"</span>, <span class="string">"11"</span>, <span class="string">"%%%%"</span>, <span class="string">"111"</span>, <span class="string">"ssss"</span>, <span class="string">"ffffff"</span>]</span><br><span class="line"></span><br><span class="line"><span class="regexp">/(\w)(\w)\2\1/</span>.test(<span class="string">'abba'</span>);</span><br><span class="line"><span class="regexp">//</span>true</span><br></pre></td></tr></table></figure><hr><h2 id="replace的高级用法"><a href="#replace的高级用法" class="headerlink" title="replace的高级用法"></a>replace的高级用法</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = 'aaaaaccccbbbbbaddfj9993iklkkkkkkkfffffiiiii';</span><br><span class="line"></span><br><span class="line">str.<span class="keyword">replace</span>(/(.)\1+/<span class="keyword">g</span>,function(<span class="variable">$0</span>, <span class="variable">$1</span>, index, <span class="keyword">input</span>)&#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="variable">$0</span>, <span class="variable">$1</span>, index, <span class="keyword">input</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">aaaaa a 0 aaaaaccccbbbbbaddfj9993iklkkkkkkkfffffiiiii</span></span><br><span class="line"><span class="comment">cccc c 5 aaaaaccccbbbbbaddfj9993iklkkkkkkkfffffiiiii</span></span><br><span class="line"><span class="comment">bbbbb b 9 aaaaaccccbbbbbaddfj9993iklkkkkkkkfffffiiiii</span></span><br><span class="line"><span class="comment">dd d 15 aaaaaccccbbbbbaddfj9993iklkkkkkkkfffffiiiii</span></span><br><span class="line"><span class="comment">999 9 19 aaaaaccccbbbbbaddfj9993iklkkkkkkkfffffiiiii</span></span><br><span class="line"><span class="comment">kkkkkkk k 26 aaaaaccccbbbbbaddfj9993iklkkkkkkkfffffiiiii</span></span><br><span class="line"><span class="comment">fffff f 33 aaaaaccccbbbbbaddfj9993iklkkkkkkkfffffiiiii</span></span><br><span class="line"><span class="comment">iiiii i 38 aaaaaccccbbbbbaddfj9993iklkkkkkkkfffffiiiii</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">str.<span class="keyword">replace</span>(/(.)\1+/<span class="keyword">g</span>, function(<span class="variable">$0</span>, <span class="variable">$1</span>, index, <span class="keyword">input</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> `($&#123;<span class="variable">$1&#125;</span>的个数是$&#123;<span class="variable">$0</span>.length&#125;)--`</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">"(a的个数是5)--(c的个数是4)--(b的个数是5)--a(d的个数是2)--fj(9的个数是3)--3ikl(k的个数是7)--(f的个数是5)--(i的个数是5)--"</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h2 id="test的注意事项"><a href="#test的注意事项" class="headerlink" title="test的注意事项"></a>test的注意事项</h2><ul><li>使用test最好不要用 全局模式</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">reg</span> = /ab/<span class="keyword">g</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>.<span class="keyword">test</span>('ababc')</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="keyword">reg</span>.lastIndex</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">reg</span>.<span class="keyword">test</span>('ababc')</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="keyword">reg</span>.lastIndex</span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="keyword">reg</span>.<span class="keyword">test</span>('ababc')</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="keyword">reg</span>.lastIndex</span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BOM(浏览器对象模型)</title>
      <link href="/2017/05/11/BOM/"/>
      <url>/2017/05/11/BOM/</url>
      
        <content type="html"><![CDATA[<p><em>Browser Object Model 浏览器对象模型，它的核心是 window ，同时这个window还是js的顶级对象。</em></p><h2 id="window-navigator-userAgent"><a href="#window-navigator-userAgent" class="headerlink" title="window.navigator.userAgent"></a>window.navigator.userAgent</h2><p>  可以获取到当前浏览器的内核信息以及用户代理信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMb</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> ret = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">var</span> ui = [<span class="string">'iPhone'</span>, <span class="string">'iPad'</span>, <span class="string">'Android'</span>];</span><br><span class="line">      <span class="keyword">var</span> userAgent = <span class="built_in">window</span>.navigator.userAgent;</span><br><span class="line">      ui.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(userAgent.indexOf(item) !== <span class="number">-1</span>)&#123;</span><br><span class="line">          ret = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="window-location-href"><a href="#window-location-href" class="headerlink" title="window.location.href"></a>window.location.href</h2><p>  可以获取或者设置url的信息</p><h2 id="window-location-hash"><a href="#window-location-hash" class="headerlink" title="window.location.hash"></a>window.location.hash</h2><p>  包括#后后面的东西，当设定hash的时候浏览器窗口不会刷新</p><h2 id="window-location-search"><a href="#window-location-search" class="headerlink" title="window.location.search"></a>window.location.search</h2><p>  获取到 ‘?’ 到 ‘#’之间的包括 ‘?’ 的部分，如果修改了search 会刷新浏览器页面<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//www.baidu.com/s?wd=react&amp;rsv_spt=1#a=1&amp;b=2</span></span><br><span class="line">    </span><br><span class="line"><span class="symbol">https:</span><span class="comment">//www.baidu.com/abc/game.html?wd=react&amp;rsv_spt=1#a=1&amp;b=2  ===&gt; href</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">https:</span><span class="comment">// ===&gt; protocol</span></span><br><span class="line"></span><br><span class="line"><span class="meta-keyword">/abc/</span>game.html  ===&gt; path</span><br><span class="line"></span><br><span class="line">/  ===&gt; root 根目录</span><br><span class="line"></span><br><span class="line">?wd=react<span class="variable">&amp;rsv_spt</span>=<span class="number">1</span>  ===&gt; search</span><br><span class="line"></span><br><span class="line"><span class="meta">#a=1&amp;b=2  ===&gt; hash</span></span><br><span class="line"></span><br><span class="line">wd=react<span class="variable">&amp;rsv_spt</span>=<span class="number">1</span>  ===&gt; querystring</span><br></pre></td></tr></table></figure></p><h2 id="prompt"><a href="#prompt" class="headerlink" title="prompt"></a>prompt</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = prompt(<span class="string">'请输入你的年龄'</span>);   </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(res);<span class="comment">// 输入的内容如果没有输入就是null</span></span><br></pre></td></tr></table></figure><h2 id="confirm"><a href="#confirm" class="headerlink" title="confirm"></a>confirm</h2><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = confirm(<span class="string">'我帅么？'</span>);</span><br><span class="line"></span><br><span class="line">console.log(res); // <span class="literal">true</span> / <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="onhashchange"><a href="#onhashchange" class="headerlink" title="onhashchange"></a>onhashchange</h2><p><em>当hash改变的时候会触发 hashchange 事件</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">      alert(<span class="built_in">window</span>.location.hash)</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie</title>
      <link href="/2017/04/20/cookie/"/>
      <url>/2017/04/20/cookie/</url>
      
        <content type="html"><![CDATA[<h2 id="cookie-的构成"><a href="#cookie-的构成" class="headerlink" title="cookie 的构成"></a>cookie 的构成</h2><ul><li>名称（name）<br><em>名称是唯一的，不区分大小写，并且中文等字符必须经过 encodeURIComponent 编码过的。</em></li><li>值（value）<br><em>就是 名称对应的 value， 同样如果是中文等 必须经过 encodeURIComponent 编码。</em></li><li>域（domain）<br><em>指定 cookie对哪个域来说是有效的，如果没有明确，那么会被默认设置当前域。</em></li><li>路径（path）<br><em>表示访问哪个路径，才会向服务器发送cookie，默认是 ‘/‘，也就是所有路径都可以访问，例如，设置了 <a href="http://www.baidu.com/abc/那么只有www.baidu.com/abc/" target="_blank" rel="noopener">www.baidu.com/abc/那么只有www.baidu.com/abc/</a> 或者 <a href="http://www.baidu.com/abc/xxx/xxx" target="_blank" rel="noopener">www.baidu.com/abc/xxx/xxx</a> …能访问这个 cookie，而 <a href="http://www.baidu.com/" target="_blank" rel="noopener">www.baidu.com/</a> 是访问不到的。</em></li><li>失效时间（expires）<br><em>表示 cookie何时被删除的时间戳，默认是关闭浏览器失效。</em></li><li>安全标志（secure）<br><em>secure 表示是否需要 https 链接。</em></li></ul><h2 id="前端应用"><a href="#前端应用" class="headerlink" title="前端应用"></a>前端应用</h2><pre><code>document.cookie = `name=value; expires=${new Date()}; domain=.aaa.com; path=/; secure`</code></pre><h2 id="js封装"><a href="#js封装" class="headerlink" title="js封装"></a>js封装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cookie = &#123;</span><br><span class="line">    <span class="keyword">set</span>(name, value, expires, domain, path, secure) &#123;</span><br><span class="line">        <span class="keyword">let</span> cookie = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span> + encodeURIComponet(value);</span><br><span class="line">        <span class="keyword">if</span> (expires <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">            cookie += <span class="string">`; expires=`</span> + expires;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (domain) &#123;</span><br><span class="line">            cookie += <span class="string">`; domain=`</span> + domain;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (path) &#123;</span><br><span class="line">            cookie += <span class="string">`; path=`</span> + path;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (secure) &#123;</span><br><span class="line">            cookie += <span class="string">`; secure`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.cookie = cookie;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span>(name) &#123;</span><br><span class="line">        <span class="keyword">const</span> cookie = <span class="built_in">document</span>.cookie;</span><br><span class="line">        <span class="keyword">const</span> searchName = <span class="built_in">encodeURIComponent</span>(name);</span><br><span class="line">        <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\b'</span> + searchName + <span class="string">'=([^;]*)\\b'</span>, <span class="string">'i'</span>);</span><br><span class="line">        <span class="keyword">const</span> ret = cookie.match(reg);</span><br><span class="line">        <span class="keyword">return</span> ret ? ret[<span class="number">1</span>] : <span class="string">''</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">delete</span>(name, expires, domain, path, secure) &#123;</span><br><span class="line">        <span class="keyword">this</span>.set(name, <span class="string">''</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>), domain, path, secure);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM(文档对象模型)</title>
      <link href="/2017/03/06/DOM/"/>
      <url>/2017/03/06/DOM/</url>
      
        <content type="html"><![CDATA[<p>##1、概念</p><ul><li>DOM是针对XML的扩展，应用于HTML的应用程序编程接口API（为了能以编程的方法操作这个 HTML 的内容）。</li><li>DOM把整个应用程序界面映射为一个多层的节点结构，把这个HTML看做一个对象树（DOM树），它本身和里面的所有东西比如<code>&lt;div&gt;&lt;/div&gt;</code> 这些标签都看做一个对象，每个对象都叫做一个节点（node），节点可以理解为DOM 中所有 元素对象 的父类。</li></ul><p>##2、节点属性<br><em>节点至少有<code>nodeType</code>、<code>nodeName</code> 和 <code>nodeValue</code>这三个基本属性。节点类型不同，这三个属性的值也不相同</em></p><hr><p> 1<em>. 元素节点 <code>Node.ELEMENT_NODE(1)</code><br> 2</em>. 属性节点 <code>Node.ATTRIBUTE_NODE(2)</code><br> 3*. 文本节点 <code>Node.TEXT_NODE(3)</code></p><ol start="4"><li>CDATA节点  <code>Node.CDATA_SECTION_NODE(4)</code></li><li>实体引用名称节点 <code>Node.ENTRY_REFERENCE_NODE(5)</code></li><li>实体名称节点 <code>Node.ENTITY_NODE(6)</code></li><li>处理指令节点 <code>Node.PROCESSING_INSTRUCTION_NODE(7)</code><br>8<em>. 注释节点 <code>Node.COMMENT_NODE(8)</code><br>9</em>. 文档节点 <code>Node.DOCUMENT_NODE(9)</code></li><li>文档类型节点 <code>Node.DOCUMENT_TYPE_NODE(10)</code></li><li>文档片段节点 <code>Node.DOCUMENT_FRAGMENT_NODE(11)</code></li><li><p>DTD声明节点 <code>Node.NOTATION_NODE(12)</code></p><p><em>1 2 3 8 9 是要记住的</em></p></li></ol><hr><p>##3、childNodes<br><code>ele.childNodes</code>可以获取到一个元素节点的所有子节点（包括换行符等文本节点和注释节点）*</p><p>##4、attributes</p><ul><li>通过<code>ele.attributes</code> 可以拿到ele元素属性节点的集合。</li><li>例如：input元素，它的属性包括type、value等，就是这两个属性就是它的属性，而这两个属性称之为属性节点，属性节点就是属性节点本身，和这个input元素节点没有任何关系。</li></ul><p>##5、parentNode/offsetParent</p><ul><li><code>ele.parentNode</code>  可以获取ele的父节点 </li><li><code>ele.offsetParent</code> 可以获取到ele的定位的父节点</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.offsetParent</span> &#123;</span></span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 100px;</span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">      position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line">      width: 90%;</span><br><span class="line">      height: 90%;</span><br><span class="line">      background-color: pink;</span><br><span class="line">      margin: 5px auto;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line">      position: absolute;</span><br><span class="line">      right: 20px;</span><br><span class="line">      top: 10px;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"offsetParent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>x<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> offsetParent = <span class="built_in">document</span>.querySelector(<span class="string">'.offsetParent'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> parent = <span class="built_in">document</span>.querySelector(<span class="string">'parnet'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> child = <span class="built_in">document</span>.querySelector(<span class="string">'.child'</span>);</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(child.parentNode);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(child.offsetParent);</span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    child.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.offsetParent.style.display = <span class="string">'none'</span>;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>##6、children</p><ul><li><code>ele.children</code> 获取到ele的所有元素的子节点，并且会动态的获取所有的元素。</li><li>在DOM中几乎所有的方法都是动态的;</li><li>不是动态的方法有：<br>-document.getElementById(“id”);<br>-document.querySelector(‘selector’);<br>-document.querySelectorAll(‘selector’);</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注释节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    /**</span><br><span class="line">     * 点击第一组的每个li变成红色，第二组的变成蓝色</span><br><span class="line">     */</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lists = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.list'</span>);</span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="comment">// var firstList = lists[0].getElementsByTagName('li');</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// var secondList = lists[1].getElementsByTagName('li');</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// </span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// for(var i=0; i&lt;firstList.length; i++)&#123;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   firstList[i].onclick = function ()&#123;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//     this.style.color = 'red';</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// </span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// for(var i=0; i&lt;secondList.length; i++)&#123;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   secondList[i].onclick = function ()&#123;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//     this.style.color = 'blue';</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// var firstList = lists[0].children;   </span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// var secondList = lists[1].children;</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// </span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// console.log(Array.isArray(firstList));</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// </span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// console.log(firstList);</span></span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="comment">// var lis = document.querySelectorAll('li');</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lisTag = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>)</span></span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>##7、previousElementSibling/nextElementSibling</p><p><code>previousElementSibling</code>获取到ele的上一个元素兄弟节点<br><code>nextElementSibling</code> 可以获取到ele的下一个元素兄弟节点<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">      width: 400px;</span><br><span class="line">      height: 200px;</span><br><span class="line">      display: flex;</span><br><span class="line">      justify-content: space-between;</span><br><span class="line">      align-items: center;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">      display: block;</span><br><span class="line">      width: 100px;</span><br><span class="line">      height: 100px;</span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>111<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"target"</span>&gt;</span>222<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>333<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> target = <span class="built_in">document</span>.querySelector(<span class="string">'.target'</span>);</span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    target.previousElementSibling.style.backgroundColor = <span class="string">'#f88'</span>;</span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    target.nextElementSibling.style.backgroundColor = <span class="string">'#0f0'</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>##8、firstElementChild/lastElementChild<br><code>firstElementChild</code> 获取到ele的第一个元素子节点<br><code>lastElementChild</code> 获取到ele的最后一个元素子节点<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>adasdsada<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>adasdsada<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>adasdsada<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>);</span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    box.firstElementChild.style.color = <span class="string">'red'</span>;</span></span><br><span class="line"><span class="actionscript">    box.lastElementChild.style.color = <span class="string">'blue'</span>;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>##9、表格的DOM操作<br><code>table.tHead</code> 获取到表格头<br><code>table.tFoot</code> 获取到表格脚</p><p><code>table.tbody.rows[index]</code> 获取tbody里面的index行</p><p><code>table.tBodies[0].rows</code> 获取到第一个tBody里面的所有的行</p><p><code>table.tBodies[0].rows[0]</code> 获取到第一个tBody里面的第一行</p><p><code>table.tBodies[0].rows[0].cells</code> 获取到rows[0]的所有单元格</p><p><code>table.tBodies[0].rows[0].cells[1]</code> 获取到rows[0]的所有单元格中的第二个 </p><p>##10、DOM创建表格<br><code>table.createThead()</code> 创建并返回创建的thead元素，然后自动插入table</p><p><code>table.createTBody()</code> 创建并返回被创建的tbody元素，然后会自动插入<br>table</p><p><code>table.createTFoot()</code><br>创建并返回被创建的tfoot元素，然后自动插入table</p><p><code>tbody.insertRow()</code> 向tbody中指定位置添加一行tr，并返回这个元素</p><p><code>tr.insertCell()</code> 向tr中指定位置添加一个单元格td并返回这个元素</p><p><code>table.deleteTHead()</code> 删除表格头</p><p><code>table.deleteTFoot()</code> 删除表格脚</p><p><code>table.tBodies[0].deleteRow()</code> 删除对应位置的行</p><p><code>table.tBodies[0].rows[0].deleteCell()</code> 删除对应行的对应位置的单元格</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"table"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 以下作为了解</span></span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建表格头  table.createTHead();  创建并返回被创建的thead元素，然后会自动插入table</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// var thead = table.createTHead();</span></span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建表格体 table.createTBody(); 创建并返回被创建的tbody元素，然后会自动插入table</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// table.createTBody();  </span></span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建表格脚 table.createTFoot(); 创建并返回被创建的tfoot元素，然后会自动插入table</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// table.createTFoot();</span></span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="comment">// 通过 tbody.insertRow(_pos_); 向tbody中指定位置添加一行tr，并返回这个元素</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 通过 tr.insertCell(_pos_); 向 tr中 指定位置 添加一个单元格 td 并返回这个元素</span></span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="comment">// table.deleteTHead(); 删除表格头</span></span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="comment">// table.deleteTFoot(); 删除表格脚</span></span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="comment">// table.tNodes[_pos_].deleteRow(_pos_) 删除对应位置的行</span></span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="comment">// table.tNodes[_pos_].rows[_pos_].deleteCell(_pos_) 删除对应行的对应位置的单元格</span></span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> table = <span class="built_in">document</span>.getElementById(<span class="string">'table'</span>);</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(table.createTHead());</span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> tbody = table.createTBody();</span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> tr = tbody.insertRow(<span class="number">0</span>);</span></span><br><span class="line">    tbody.insertRow(0);</span><br><span class="line">    tbody.insertRow(0);</span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    tr.insertCell(<span class="number">0</span>).innerHTML = <span class="string">'1111'</span></span></span><br><span class="line"><span class="actionscript">    tr.insertCell(<span class="number">1</span>).innerHTML = <span class="string">'1111'</span></span></span><br><span class="line"><span class="actionscript">    tr.insertCell(<span class="number">2</span>).innerHTML = <span class="string">'1111'</span></span></span><br><span class="line"><span class="actionscript">    tr.insertCell(<span class="number">3</span>).innerHTML = <span class="string">'1111'</span></span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    tbody.insertRow(<span class="number">2</span>).insertCell(<span class="number">0</span>).innerHTML = <span class="string">'2222'</span>;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>##11、DOM操作表单</p><p><code>document.forms</code> 获取到页面上的表单</p><p><code>forms.someInputName</code> 获取到对应的name的表单内</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form1"</span> <span class="attr">action</span>=<span class="string">"index.html"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"text1"</span> <span class="attr">value</span>=<span class="string">"11111"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit1"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form2"</span> <span class="attr">action</span>=<span class="string">"index.html"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"text2"</span> <span class="attr">value</span>=<span class="string">"2222"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit2"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// document.forms 获取到页面上所有的表单</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// froms.someInputName 获取到对应name的表单内部元素</span></span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.forms);</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.forms[<span class="number">1</span>]);</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.forms[<span class="number">1</span>].submit2);</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中Math对象</title>
      <link href="/2017/02/20/Math%E5%AF%B9%E8%B1%A1/"/>
      <url>/2017/02/20/Math%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="常用对象"><a href="#常用对象" class="headerlink" title="常用对象"></a>常用对象</h2><ol><li>Math.PI  <em>（圆周率）</em></li><li>Math.abs() <em>（求绝对值）</em></li><li>Math.random() <em>(随机数)</em></li><li>Math.round() <em>（四舍五入）</em></li><li>Math.sin(rad) <em>(三角函数的正弦值):返回[-1,1]之间的数</em></li><li>Math.cos(rad) <em>(三角函数的余弦值):返回[-1,1]之间的数</em></li><li>Math.tan(rad) <em>(三角函数的正切值):返回[-1,1]之间的数</em></li><li>Math.atan(x) <em>(三角函数的反正切值):返回[-pi/2,pi/2]之间的数</em></li><li>Math.atan2(dy,dx) <em>(返回值是[-pi,pi]之间的数)</em></li><li>Math.floor(n) <em>向下取整</em></li><li>Math.ceil(n) <em>向上取整</em></li><li>Math.pow(x,n) <em>求x的n次幂</em></li><li>Math.sqrt(x,n) <em>求x的n次方根</em></li><li>Math.max(n1,n2,n3…) <em>求最大值</em></li><li>Math.min（n1,n2,n3…) <em>求最小值</em></li><li>（x ** y）x的y次幂 （ES6的新运算符）</li></ol><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ol><li><p>求最大或最小值</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">29</span>,<span class="number">94</span>];</span><br><span class="line">var max=Math.max(...arr),</span><br><span class="line">    min=Math.min(...arr);</span><br></pre></td></tr></table></figure></li><li><p>取随机数</p></li></ol><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> n=Math.<span class="built_in">round</span>(Math.<span class="built_in">random</span>()*(<span class="built_in">max</span>-<span class="built_in">min</span>)+<span class="built_in">min</span>);  //获取[<span class="built_in">min</span>,<span class="built_in">max</span>]之间的随机整数</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js中的数据类型</title>
      <link href="/2017/02/06/JS%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2017/02/06/JS%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul><li>null 代表一个空</li><li>undefined 代表未定义</li><li>number 代表数字类型</li><li>string 代表字符串</li><li>boolean 代表布尔值</li></ul><h2 id="复杂数据类型（引用数据类型）"><a href="#复杂数据类型（引用数据类型）" class="headerlink" title="复杂数据类型（引用数据类型）"></a>复杂数据类型（引用数据类型）</h2><ul><li>对象 (JS里面出了基本数据类型，其他的都是对象)</li><li>数组 [ ]</li><li>函数function fn(){ }</li><li>DOM元素</li><li>{ }</li><li>……</li></ul><hr><h2 id="区分数据类型"><a href="#区分数据类型" class="headerlink" title="区分数据类型"></a>区分数据类型</h2><p><em>使用一元操作符typeof</em></p><h3 id="基本使用-：typeof-数据"><a href="#基本使用-：typeof-数据" class="headerlink" title="基本使用 ：typeof 数据"></a>基本使用 ：typeof 数据</h3><ul><li><em>typeof所判断的数据类型的返回信息的数据类型是string</em></li></ul><hr><h3 id="JS中的数据类型之间的转换一共可以转为3种类型"><a href="#JS中的数据类型之间的转换一共可以转为3种类型" class="headerlink" title="JS中的数据类型之间的转换一共可以转为3种类型"></a>JS中的数据类型之间的转换一共可以转为3种类型</h3><blockquote><ul><li>数字</li><li>字符串</li><li>布尔值</li></ul></blockquote><hr><h3 id="Null类型只有一个数值：null"><a href="#Null类型只有一个数值：null" class="headerlink" title="Null类型只有一个数值：null"></a>Null类型只有一个数值：null</h3><pre><code>typeof null===&apos;object&apos;</code></pre><h3 id="undefined类型只有一个值：undefined"><a href="#undefined类型只有一个值：undefined" class="headerlink" title="undefined类型只有一个值：undefined"></a>undefined类型只有一个值：undefined</h3><blockquote><ol><li>一般情况下某个变量声明了但是没有赋值的时候</li><li>某个对象的属性不存在的时候去访问这个属性的时候</li><li>*undefined类型实质上派生自null类型所有当undefined ==null ==&gt;true</li></ol></blockquote><h3 id="如何判断一个数据是不是Null"><a href="#如何判断一个数据是不是Null" class="headerlink" title="如何判断一个数据是不是Null"></a>如何判断一个数据是不是Null</h3><blockquote><p>if(xxx ===null){<br>    如果条件成立就证明是null<br>    }</p></blockquote><pre><code>console.log(undefined == null);  //trueconsole.log(undefined === null );//false</code></pre>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
